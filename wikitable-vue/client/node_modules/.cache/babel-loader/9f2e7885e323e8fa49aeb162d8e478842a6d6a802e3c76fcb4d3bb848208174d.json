{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-69ad0d39\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"danmu-container\",\n  ref: \"danmuContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.visibleDanmus, danmu => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: danmu.id,\n      class: \"danmu-item\",\n      style: _normalizeStyle({\n        top: `${danmu.top}px`,\n        'animation-duration': `${danmu.speed}s`,\n        color: danmu.color\n      })\n    }, _toDisplayString(danmu.user) + \"：\" + _toDisplayString(danmu.content), 5 /* TEXT, STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","visibleDanmus","danmu","key","id","style","_normalizeStyle","top","speed","color","user","_toDisplayString","content"],"sources":["D:\\ZhiHu\\zhihu-bullet\\wikitable-vue\\client\\src\\components\\DanmuDisplay.vue"],"sourcesContent":["<template>\r\n\t<div class=\"danmu-container\" ref=\"danmuContainer\">\r\n\t\t<div\r\n\t\t\tv-for=\"danmu in visibleDanmus\"\r\n\t\t\t:key=\"danmu.id\"\r\n\t\t\tclass=\"danmu-item\"\r\n\t\t\t:style=\"{\r\n\t\t\t\ttop: `${danmu.top}px`,\r\n\t\t\t\t'animation-duration': `${danmu.speed}s`,\r\n\t\t\t\tcolor: danmu.color\r\n\t\t\t}\">\r\n\t\t\t{{ danmu.user }}：{{ danmu.content }}\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcomments: Array,\r\n\t\tactiveSentence: Number,\r\n\t\tmaxLines: {\r\n\t\t\t// 新增：控制最大行数\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3\r\n\t\t},\r\n\t\tmaxDanmus: {\r\n\t\t\t// 新增：控制最大弹幕数量\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 5\r\n\t\t}\r\n\t});\r\n\r\n\tconst colorPool = [\r\n\t\t\"#FF6B6B\",\r\n\t\t\"#4ECDC4\",\r\n\t\t\"#45B7D1\",\r\n\t\t\"#FFA07A\",\r\n\t\t\"#98D8C8\",\r\n\t\t\"#F06292\",\r\n\t\t\"#7986CB\",\r\n\t\t\"#9575CD\",\r\n\t\t\"#64B5F6\",\r\n\t\t\"#4DB6AC\",\r\n\t\t\"#81C784\",\r\n\t\t\"#FFD54F\"\r\n\t];\r\n\r\n\tconst danmuContainer = ref(null);\r\n\tconst danmuLines = ref([]); // 记录每行弹幕的结束时间\r\n\tconst allDanmus = ref([]);\r\n\r\n\t// 获取随机颜色\r\n\tconst getRandomColor = () => {\r\n\t\treturn colorPool[Math.floor(Math.random() * colorPool.length)];\r\n\t};\r\n\r\n\t// 获取某句子的相关评论\r\n\tconst getCommentsForSentence = sentenceIndex => {\r\n\t\treturn props.comments.filter(comment => comment.link === sentenceIndex);\r\n\t};\r\n\r\n\t// 计算弹幕速度（根据长度）\r\n\tconst calculateSpeed = text => {\r\n\t\tconst baseSpeed = 10;\r\n\t\tconst lengthFactor = Math.min(text.length / 50, 2); // 长度影响系数\r\n\t\treturn baseSpeed + Math.random() * 5 * lengthFactor;\r\n\t};\r\n\r\n\t// 分配弹幕行（防止重叠）\r\n\tconst assignDanmuLine = () => {\r\n\t\tconst now = Date.now();\r\n\t\tconst availableLines = [];\r\n\r\n\t\t// 找出可用的行\r\n\t\tfor (let i = 0; i < props.maxLines; i++) {\r\n\t\t\tif (!danmuLines.value[i] || danmuLines.value[i] < now) {\r\n\t\t\t\tavailableLines.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn availableLines.length > 0\r\n\t\t\t? availableLines[Math.floor(Math.random() * availableLines.length)]\r\n\t\t\t: Math.floor(Math.random() * props.maxLines); // 如果都占用则随机选一行\r\n\t};\r\n\r\n\t// 生成弹幕数据\r\n\tconst generateDanmus = () => {\r\n\t\tif (props.activeSentence === null) return;\r\n\r\n\t\tconst relatedComments = getCommentsForSentence(props.activeSentence);\r\n\t\tif (relatedComments.length === 0) return;\r\n\r\n\t\t// 限制弹幕数量\r\n\t\tconst commentsToShow = relatedComments.slice(0, props.maxDanmus);\r\n\r\n\t\tcommentsToShow.forEach(comment => {\r\n\t\t\tconst lineIndex = assignDanmuLine();\r\n\t\t\tconst speed = calculateSpeed(comment.content);\r\n\r\n\t\t\t// 记录此行将被占用（预计3秒后释放）\r\n\t\t\tdanmuLines.value[lineIndex] = Date.now() + speed * 1000;\r\n\r\n\t\t\tallDanmus.value.push({\r\n\t\t\t\tid: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n\t\t\t\tcontent: comment.content,\r\n\t\t\t\tuser: comment.user_nickname,\r\n\t\t\t\tcolor: getRandomColor(),\r\n\t\t\t\ttop: lineIndex * 30 + 10, // 每行间隔30px\r\n\t\t\t\tspeed: speed,\r\n\t\t\t\tcreateTime: Date.now()\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t// 清理过期弹幕\r\n\tconst cleanExpiredDanmus = () => {\r\n\t\tconst now = Date.now();\r\n\t\tallDanmus.value = allDanmus.value.filter(danmu => {\r\n\t\t\treturn now - danmu.createTime < danmu.speed * 1000 * 1.5; // 保留时间比动画时间长50%\r\n\t\t});\r\n\t};\r\n\r\n\t// 可见的弹幕（限制数量）\r\n\tconst visibleDanmus = computed(() => {\r\n\t\tcleanExpiredDanmus();\r\n\t\treturn allDanmus.value.slice(-props.maxDanmus * 2); // 保留最近N条\r\n\t});\r\n\r\n\t// 监听激活的句子变化\r\n\twatch(\r\n\t\t() => props.activeSentence,\r\n\t\tnewVal => {\r\n\t\t\tif (newVal !== null) {\r\n\t\t\t\tgenerateDanmus();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// 初始化行记录\r\n\tonMounted(() => {\r\n\t\tdanmuLines.value = Array(props.maxLines).fill(0);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.danmu-container {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: calc(v-bind(\"props.maxLines\") * 30px + 20px);\r\n\t\toverflow: hidden;\r\n\t\tz-index: 100;\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.danmu-item {\r\n\t\tposition: absolute;\r\n\t\twhite-space: nowrap;\r\n\t\tfont-size: 16px;\r\n\t\ttext-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);\r\n\t\tpadding: 4px 12px;\r\n\t\tborder-radius: 15px;\r\n\t\tbackground-color: rgba(255, 255, 255, 0.8);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t\tanimation: danmu-move linear;\r\n\t\tleft: 100%;\r\n\t\ttransform: translateX(0);\r\n\t\twill-change: transform;\r\n\t}\r\n\r\n\t@keyframes danmu-move {\r\n\t\tto {\r\n\t\t\ttransform: translateX(-100vw);\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACMA,KAAK,EAAC,iBAAiB;EAACC,GAAG,EAAC;;;uBAAjCC,mBAAA,CAYM,OAZNC,UAYM,I,kBAXLD,mBAAA,CAUME,SAAA,QAZRC,WAAA,CAGmBC,MAAA,CAAAC,aAAa,EAAtBC,KAAK;yBADbN,mBAAA,CAUM;MARJO,GAAG,EAAED,KAAK,CAACE,EAAE;MACdV,KAAK,EAAC,YAAY;MACjBW,KAAK,EANTC,eAAA;gBAM0BJ,KAAK,CAACK,GAAG;iCAAoCL,KAAK,CAACM,KAAK;eAAiBN,KAAK,CAACO;;wBAKnGP,KAAK,CAACQ,IAAI,IAAG,GAAC,GAAAC,gBAAA,CAAGT,KAAK,CAACU,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}