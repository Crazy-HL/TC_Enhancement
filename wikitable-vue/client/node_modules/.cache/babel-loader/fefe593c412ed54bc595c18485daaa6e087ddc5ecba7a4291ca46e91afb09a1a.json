{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch, onMounted } from \"vue\";\nimport api from \"@/api\";\nexport default {\n  __name: 'HighFrequencyWords',\n  props: {\n    sentence: {\n      type: String,\n      required: true\n    },\n    sentenceIndex: {\n      type: Number,\n      required: true\n    },\n    comments: {\n      type: Array,\n      default: () => []\n    },\n    active: {\n      type: Boolean,\n      default: false\n    },\n    minFrequency: {\n      type: Number,\n      default: 3\n    },\n    maxFontSize: {\n      type: Number,\n      default: 1.5\n    },\n    minFontSize: {\n      type: Number,\n      default: 1\n    },\n    colorRange: {\n      type: Array,\n      default: () => [\"#FFD700\", \"#FF6347\"]\n    }\n  },\n  emits: [\"word-click\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 数据状态\n    const wordFrequency = ref({});\n    const highlightedWords = ref([]);\n    const segmentedText = ref([]);\n    const isLoading = ref(false);\n    const error = ref(null);\n\n    // 分词函数 - 改进的中文分词\n    const segmentText = text => {\n      if (!text) return [];\n\n      // 匹配中文词语、英文单词和标点符号\n      const regex = /([\\u4e00-\\u9fa5]{1,4}|[a-zA-Z]+|\\p{P}|\\s)/gu;\n      const segments = [];\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const token = match[0];\n        segments.push({\n          text: token,\n          isWord: /[\\u4e00-\\u9fa5]{2,}|[a-zA-Z]{3,}/.test(token)\n        });\n      }\n      return segments;\n    };\n\n    // 获取词频数据 - 增强错误处理\n    const fetchWordFrequency = async () => {\n      if (!props.active || isLoading.value) return;\n      isLoading.value = true;\n      error.value = null;\n      try {\n        const response = await api.post(\"word_frequency\", {\n          sentence_index: props.sentenceIndex,\n          comments: props.comments\n        });\n\n        // 增强响应处理 - 兼容多种响应格式\n        const responseData = response && typeof response === \"object\" ? response.status === \"success\" ? response.data : response // 处理非标准响应\n        : {}; // 处理完全无效的响应\n\n        if (responseData && typeof responseData.word_frequency === \"object\") {\n          wordFrequency.value = responseData.word_frequency || {};\n        } else {\n          throw new Error(\"Invalid response format\");\n        }\n      } catch (err) {\n        console.error(\"Failed to fetch word frequency:\", err);\n        error.value = err.message || \"Failed to load word frequency\";\n        wordFrequency.value = {};\n      } finally {\n        isLoading.value = false;\n        updateHighlightedWords();\n      }\n    };\n\n    // 更新高亮词汇\n    const updateHighlightedWords = () => {\n      highlightedWords.value = Object.entries(wordFrequency.value).filter(_ref2 => {\n        let [_, count] = _ref2;\n        return count >= props.minFrequency;\n      }).map(_ref3 => {\n        let [word] = _ref3;\n        return word;\n      });\n    };\n\n    // 是否应该高亮显示该词\n    const isHighlighted = word => {\n      return props.active && highlightedWords.value.includes(word);\n    };\n\n    // 获取词的样式\n    const getWordStyle = word => {\n      if (!isHighlighted(word)) return {};\n      const count = wordFrequency.value[word] || 0;\n      const maxCount = Math.max(...Object.values(wordFrequency.value), props.minFrequency);\n      const ratio = Math.min(count / maxCount, 1);\n\n      // 字体大小映射\n      const fontSize = props.minFontSize + (props.maxFontSize - props.minFontSize) * ratio;\n\n      // 颜色渐变\n      const color = interpolateColor(props.colorRange[0], props.colorRange[1], ratio);\n      return {\n        fontSize: `${fontSize}em`,\n        color: color,\n        fontWeight: 400 + Math.round(ratio * 300),\n        backgroundColor: `hsla(30, 80%, 80%, ${ratio * 0.2})`,\n        padding: \"0 2px\",\n        borderRadius: \"3px\",\n        transition: \"all 0.2s ease\",\n        display: \"inline-block\",\n        lineHeight: \"1.2\"\n      };\n    };\n\n    // 颜色插值函数\n    const interpolateColor = (color1, color2, factor) => {\n      if (!color1 || !color2) return \"#FFD700\"; // 默认颜色\n\n      const hex = color => color.replace(\"#\", \"\");\n      const h2r = hex => parseInt(hex, 16);\n      const r2h = num => Math.round(num).toString(16).padStart(2, \"0\");\n      const c1 = hex(color1);\n      const c2 = hex(color2);\n      const r1 = h2r(c1.substring(0, 2));\n      const g1 = h2r(c1.substring(2, 4));\n      const b1 = h2r(c1.substring(4, 6));\n      const r2 = h2r(c2.substring(0, 2));\n      const g2 = h2r(c2.substring(2, 4));\n      const b2 = h2r(c2.substring(4, 6));\n      const r = r1 + (r2 - r1) * factor;\n      const g = g1 + (g2 - g1) * factor;\n      const b = b1 + (b2 - b1) * factor;\n      return `#${r2h(r)}${r2h(g)}${r2h(b)}`;\n    };\n\n    // 处理词汇点击\n    const handleWordClick = word => {\n      if (isHighlighted(word)) {\n        emit(\"word-click\", {\n          word: word,\n          frequency: wordFrequency.value[word] || 0\n        });\n      }\n    };\n\n    // 初始化分词\n    onMounted(() => {\n      segmentedText.value = segmentText(props.sentence);\n    });\n\n    // 监听属性变化\n    watch(() => props.sentence, newVal => {\n      segmentedText.value = segmentText(newVal);\n    });\n    watch(() => props.active, newVal => {\n      if (newVal) {\n        fetchWordFrequency();\n      } else {\n        wordFrequency.value = {};\n        highlightedWords.value = [];\n      }\n    });\n    watch(() => props.comments, () => {\n      if (props.active) {\n        fetchWordFrequency();\n      }\n    }, {\n      deep: true\n    });\n    const __returned__ = {\n      props,\n      emit,\n      wordFrequency,\n      highlightedWords,\n      segmentedText,\n      isLoading,\n      error,\n      segmentText,\n      fetchWordFrequency,\n      updateHighlightedWords,\n      isHighlighted,\n      getWordStyle,\n      interpolateColor,\n      handleWordClick,\n      ref,\n      computed,\n      watch,\n      onMounted,\n      get api() {\n        return api;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","api","props","__props","emit","__emit","wordFrequency","highlightedWords","segmentedText","isLoading","error","segmentText","text","regex","segments","match","exec","token","push","isWord","test","fetchWordFrequency","active","value","response","post","sentence_index","sentenceIndex","comments","responseData","status","data","word_frequency","Error","err","console","message","updateHighlightedWords","Object","entries","filter","_ref2","_","count","minFrequency","map","_ref3","word","isHighlighted","includes","getWordStyle","maxCount","Math","max","values","ratio","min","fontSize","minFontSize","maxFontSize","color","interpolateColor","colorRange","fontWeight","round","backgroundColor","padding","borderRadius","transition","display","lineHeight","color1","color2","factor","hex","replace","h2r","parseInt","r2h","num","toString","padStart","c1","c2","r1","substring","g1","b1","r2","g2","b2","r","g","b","handleWordClick","frequency","sentence","newVal","deep"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/HighFrequencyWords.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\timport api from \"@/api\";\r\n\r\n\tconst props = defineProps({\r\n\t\tsentence: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tsentenceIndex: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tcomments: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tactive: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tminFrequency: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3\r\n\t\t},\r\n\t\tmaxFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1.5\r\n\t\t},\r\n\t\tminFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tcolorRange: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [\"#FFD700\", \"#FF6347\"]\r\n\t\t}\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"word-click\"]);\r\n\r\n\t// 数据状态\r\n\tconst wordFrequency = ref({});\r\n\tconst highlightedWords = ref([]);\r\n\tconst segmentedText = ref([]);\r\n\tconst isLoading = ref(false);\r\n\tconst error = ref(null);\r\n\r\n\t// 分词函数 - 改进的中文分词\r\n\tconst segmentText = text => {\r\n\t\tif (!text) return [];\r\n\r\n\t\t// 匹配中文词语、英文单词和标点符号\r\n\t\tconst regex = /([\\u4e00-\\u9fa5]{1,4}|[a-zA-Z]+|\\p{P}|\\s)/gu;\r\n\t\tconst segments = [];\r\n\t\tlet match;\r\n\r\n\t\twhile ((match = regex.exec(text)) !== null) {\r\n\t\t\tconst token = match[0];\r\n\t\t\tsegments.push({\r\n\t\t\t\ttext: token,\r\n\t\t\t\tisWord: /[\\u4e00-\\u9fa5]{2,}|[a-zA-Z]{3,}/.test(token)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn segments;\r\n\t};\r\n\r\n\t// 获取词频数据 - 增强错误处理\r\n\tconst fetchWordFrequency = async () => {\r\n\t\tif (!props.active || isLoading.value) return;\r\n\r\n\t\tisLoading.value = true;\r\n\t\terror.value = null;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"word_frequency\", {\r\n\t\t\t\tsentence_index: props.sentenceIndex,\r\n\t\t\t\tcomments: props.comments\r\n\t\t\t});\r\n\r\n\t\t\t// 增强响应处理 - 兼容多种响应格式\r\n\t\t\tconst responseData =\r\n\t\t\t\tresponse && typeof response === \"object\"\r\n\t\t\t\t\t? response.status === \"success\"\r\n\t\t\t\t\t\t? response.data\r\n\t\t\t\t\t\t: response // 处理非标准响应\r\n\t\t\t\t\t: {}; // 处理完全无效的响应\r\n\r\n\t\t\tif (responseData && typeof responseData.word_frequency === \"object\") {\r\n\t\t\t\twordFrequency.value = responseData.word_frequency || {};\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Invalid response format\");\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"Failed to fetch word frequency:\", err);\r\n\t\t\terror.value = err.message || \"Failed to load word frequency\";\r\n\t\t\twordFrequency.value = {};\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t\tupdateHighlightedWords();\r\n\t\t}\r\n\t};\r\n\r\n\t// 更新高亮词汇\r\n\tconst updateHighlightedWords = () => {\r\n\t\thighlightedWords.value = Object.entries(wordFrequency.value)\r\n\t\t\t.filter(([_, count]) => count >= props.minFrequency)\r\n\t\t\t.map(([word]) => word);\r\n\t};\r\n\r\n\t// 是否应该高亮显示该词\r\n\tconst isHighlighted = word => {\r\n\t\treturn props.active && highlightedWords.value.includes(word);\r\n\t};\r\n\r\n\t// 获取词的样式\r\n\tconst getWordStyle = word => {\r\n\t\tif (!isHighlighted(word)) return {};\r\n\r\n\t\tconst count = wordFrequency.value[word] || 0;\r\n\t\tconst maxCount = Math.max(\r\n\t\t\t...Object.values(wordFrequency.value),\r\n\t\t\tprops.minFrequency\r\n\t\t);\r\n\t\tconst ratio = Math.min(count / maxCount, 1);\r\n\r\n\t\t// 字体大小映射\r\n\t\tconst fontSize =\r\n\t\t\tprops.minFontSize + (props.maxFontSize - props.minFontSize) * ratio;\r\n\r\n\t\t// 颜色渐变\r\n\t\tconst color = interpolateColor(\r\n\t\t\tprops.colorRange[0],\r\n\t\t\tprops.colorRange[1],\r\n\t\t\tratio\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tfontSize: `${fontSize}em`,\r\n\t\t\tcolor: color,\r\n\t\t\tfontWeight: 400 + Math.round(ratio * 300),\r\n\t\t\tbackgroundColor: `hsla(30, 80%, 80%, ${ratio * 0.2})`,\r\n\t\t\tpadding: \"0 2px\",\r\n\t\t\tborderRadius: \"3px\",\r\n\t\t\ttransition: \"all 0.2s ease\",\r\n\t\t\tdisplay: \"inline-block\",\r\n\t\t\tlineHeight: \"1.2\"\r\n\t\t};\r\n\t};\r\n\r\n\t// 颜色插值函数\r\n\tconst interpolateColor = (color1, color2, factor) => {\r\n\t\tif (!color1 || !color2) return \"#FFD700\"; // 默认颜色\r\n\r\n\t\tconst hex = color => color.replace(\"#\", \"\");\r\n\t\tconst h2r = hex => parseInt(hex, 16);\r\n\t\tconst r2h = num => Math.round(num).toString(16).padStart(2, \"0\");\r\n\r\n\t\tconst c1 = hex(color1);\r\n\t\tconst c2 = hex(color2);\r\n\r\n\t\tconst r1 = h2r(c1.substring(0, 2));\r\n\t\tconst g1 = h2r(c1.substring(2, 4));\r\n\t\tconst b1 = h2r(c1.substring(4, 6));\r\n\r\n\t\tconst r2 = h2r(c2.substring(0, 2));\r\n\t\tconst g2 = h2r(c2.substring(2, 4));\r\n\t\tconst b2 = h2r(c2.substring(4, 6));\r\n\r\n\t\tconst r = r1 + (r2 - r1) * factor;\r\n\t\tconst g = g1 + (g2 - g1) * factor;\r\n\t\tconst b = b1 + (b2 - b1) * factor;\r\n\r\n\t\treturn `#${r2h(r)}${r2h(g)}${r2h(b)}`;\r\n\t};\r\n\r\n\t// 处理词汇点击\r\n\tconst handleWordClick = word => {\r\n\t\tif (isHighlighted(word)) {\r\n\t\t\temit(\"word-click\", {\r\n\t\t\t\tword: word,\r\n\t\t\t\tfrequency: wordFrequency.value[word] || 0\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t// 初始化分词\r\n\tonMounted(() => {\r\n\t\tsegmentedText.value = segmentText(props.sentence);\r\n\t});\r\n\r\n\t// 监听属性变化\r\n\twatch(\r\n\t\t() => props.sentence,\r\n\t\tnewVal => {\r\n\t\t\tsegmentedText.value = segmentText(newVal);\r\n\t\t}\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.active,\r\n\t\tnewVal => {\r\n\t\t\tif (newVal) {\r\n\t\t\t\tfetchWordFrequency();\r\n\t\t\t} else {\r\n\t\t\t\twordFrequency.value = {};\r\n\t\t\t\thighlightedWords.value = [];\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.comments,\r\n\t\t() => {\r\n\t\t\tif (props.active) {\r\n\t\t\t\tfetchWordFrequency();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<template>\r\n\t<span class=\"word-container\">\r\n\t\t<template v-if=\"error\" class=\"error-message\">\r\n\t\t\t<span class=\"error-text\">高频词加载失败: {{ error }}</span>\r\n\t\t</template>\r\n\r\n\t\t<template v-else>\r\n\t\t\t<template v-for=\"(segment, index) in segmentedText\" :key=\"index\">\r\n\t\t\t\t<span\r\n\t\t\t\t\tv-if=\"segment.isWord && isHighlighted(segment.text)\"\r\n\t\t\t\t\tclass=\"frequency-word\"\r\n\t\t\t\t\t:style=\"getWordStyle(segment.text)\"\r\n\t\t\t\t\t:title=\"`在相关评论中出现 ${wordFrequency[segment.text] || 0} 次`\"\r\n\t\t\t\t\t@click=\"handleWordClick(segment.text)\">\r\n\t\t\t\t\t{{ segment.text }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span v-else class=\"normal-text\">\r\n\t\t\t\t\t{{ segment.text }}\r\n\t\t\t\t</span>\r\n\t\t\t</template>\r\n\r\n\t\t\t<span v-if=\"isLoading\" class=\"loading-indicator\">...</span>\r\n\t\t</template>\r\n\t</span>\r\n</template>\r\n\r\n<style scoped>\r\n\t.word-container {\r\n\t\tdisplay: inline;\r\n\t\tline-height: 1.6;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.frequency-word {\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s ease;\r\n\t}\r\n\r\n\t.frequency-word:hover {\r\n\t\ttransform: translateY(-2px);\r\n\t\tz-index: 2;\r\n\t\tbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\r\n\t}\r\n\r\n\t.normal-text {\r\n\t\tdisplay: inline;\r\n\t}\r\n\r\n\t.loading-indicator {\r\n\t\tdisplay: inline-block;\r\n\t\tmargin-left: 4px;\r\n\t\tcolor: #999;\r\n\t}\r\n\r\n\t.error-message {\r\n\t\tdisplay: inline-block;\r\n\t}\r\n\r\n\t.error-text {\r\n\t\tcolor: #ff4757;\r\n\t\tfont-size: 0.8em;\r\n\t\tpadding: 2px 4px;\r\n\t\tbackground-color: #ffecec;\r\n\t\tborder-radius: 3px;\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}