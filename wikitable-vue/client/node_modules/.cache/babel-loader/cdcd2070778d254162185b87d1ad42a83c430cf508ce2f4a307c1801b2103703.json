{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed } from \"vue\";\nexport default {\n  __name: 'CommentStats',\n  props: {\n    comments: {\n      type: Array,\n      required: true\n    },\n    showStandpoint: {\n      type: Boolean,\n      default: true\n    },\n    showEmotion: {\n      type: Boolean,\n      default: true\n    },\n    showType: {\n      type: Boolean,\n      default: false\n    },\n    size: {\n      type: Number,\n      default: 80\n    }\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const props = __props;\n\n    // 计算立场分布\n    const standpoints = computed(() => {\n      const counts = {\n        1: 0,\n        // 支持\n        [-1]: 0,\n        // 反对\n        0: 0 // 中立\n      };\n      props.comments.forEach(comment => {\n        counts[comment.standpoint]++;\n      });\n      const total = props.comments.length;\n      return [{\n        type: 1,\n        percentage: counts[1] / total,\n        count: counts[1]\n      }, {\n        type: -1,\n        percentage: counts[-1] / total,\n        count: counts[-1]\n      }, {\n        type: 0,\n        percentage: counts[0] / total,\n        count: counts[0]\n      }].filter(item => item.count > 0);\n    });\n\n    // 计算情感分布\n    const emotions = computed(() => {\n      const counts = {\n        1: 0,\n        // 积极\n        [-1]: 0,\n        // 消极\n        0: 0 // 中立\n      };\n      props.comments.forEach(comment => {\n        counts[comment.emotion]++;\n      });\n      const total = props.comments.length;\n      return [{\n        type: 1,\n        percentage: counts[1] / total,\n        count: counts[1]\n      }, {\n        type: -1,\n        percentage: counts[-1] / total,\n        count: counts[-1]\n      }, {\n        type: 0,\n        percentage: counts[0] / total,\n        count: counts[0]\n      }].filter(item => item.count > 0);\n    });\n\n    // 计算评论类型分布\n    const typeDistribution = computed(() => {\n      const types = {\n        1: {\n          type: 1,\n          count: 0,\n          label: \"陈述\"\n        },\n        2: {\n          type: 2,\n          count: 0,\n          label: \"疑问\"\n        },\n        3: {\n          type: 3,\n          count: 0,\n          label: \"感叹\"\n        },\n        4: {\n          type: 4,\n          count: 0,\n          label: \"建议\"\n        },\n        5: {\n          type: 5,\n          count: 0,\n          label: \"讽刺\"\n        }\n      };\n      props.comments.forEach(comment => {\n        const type = comment.comment_type || 1;\n        types[type].count++;\n      });\n      return Object.values(types).filter(t => t.count > 0);\n    });\n    const totalCount = computed(() => {\n      return props.comments.length;\n    });\n\n    // 计算情感饼图分段\n    const emotionSegments = computed(() => {\n      const segments = [];\n      let startAngle = 0;\n      emotions.value.forEach(emotion => {\n        const endAngle = startAngle + emotion.percentage * 360;\n        if (emotion.percentage > 0) {\n          segments.push({\n            type: emotion.type,\n            path: describeArc(50, 50, 40, 40, startAngle, endAngle),\n            percentage: emotion.percentage\n          });\n        }\n        startAngle = endAngle;\n      });\n      return segments;\n    });\n\n    // 计算评论类型饼图分段\n    const typeSegments = computed(() => {\n      const segments = [];\n      let startAngle = 0;\n      typeDistribution.value.forEach(type => {\n        const percentage = type.count / totalCount.value;\n        const endAngle = startAngle + percentage * 360;\n        if (percentage > 0) {\n          segments.push({\n            type: type.type,\n            path: describeArc(50, 50, 40, 40, startAngle, endAngle),\n            percentage: percentage\n          });\n        }\n        startAngle = endAngle;\n      });\n      return segments;\n    });\n\n    // 饼图路径计算函数\n    function describeArc(x, y, radius, innerRadius, startAngle, endAngle) {\n      const start = polarToCartesian(x, y, radius, endAngle);\n      const end = polarToCartesian(x, y, radius, startAngle);\n      const innerStart = polarToCartesian(x, y, innerRadius, endAngle);\n      const innerEnd = polarToCartesian(x, y, innerRadius, startAngle);\n      const largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\n      return [\"M\", start.x, start.y, \"A\", radius, radius, 0, largeArcFlag, 0, end.x, end.y, \"L\", innerEnd.x, innerEnd.y, \"A\", innerRadius, innerRadius, 0, largeArcFlag, 1, innerStart.x, innerStart.y, \"Z\"].join(\" \");\n    }\n    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      const angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n\n    // 立场颜色映射\n    function getStandpointColor(type) {\n      return {\n        1: \"#ccebc5\",\n        // 支持 - 绿色\n        [-1]: \"#fbb4ae\",\n        // 反对 - 红色\n        0: \"#b3cde3\" // 中立 - 蓝色\n      }[type] || \"#9E9E9E\";\n    }\n    function getStandpointLabel(type) {\n      return {\n        1: \"支持\",\n        [-1]: \"反对\",\n        0: \"中立\"\n      }[type] || \"未知\";\n    }\n\n    // 情感颜色映射\n    function getEmotionColor(type) {\n      return {\n        1: \"#4daf4a\",\n        // 积极 - 绿色\n        [-1]: \"#e41a1c\",\n        // 消极 - 红色\n        0: \"#377eb8\" // 中立 - 蓝色\n      }[type] || \"#9E9E9E\";\n    }\n    function getEmotionLabel(type) {\n      return {\n        1: \"积极\",\n        [-1]: \"消极\",\n        0: \"中立\"\n      }[type] || \"未知\";\n    }\n\n    // 评论类型颜色映射\n    function getTypeColor(type) {\n      return {\n        1: \"#4285F4\",\n        // 陈述 - 蓝色\n        2: \"#EA4335\",\n        // 疑问 - 红色\n        3: \"#34A853\",\n        // 感叹 - 绿色\n        4: \"#9C27B0\",\n        // 建议 - 紫色\n        5: \"#FF9800\" // 讽刺 - 橙色\n      }[type] || \"#9E9E9E\";\n    }\n    function getTypeLabel(type) {\n      return {\n        1: \"陈述\",\n        2: \"疑问\",\n        3: \"感叹\",\n        4: \"建议\",\n        5: \"讽刺\"\n      }[type] || \"未知\";\n    }\n    const __returned__ = {\n      props,\n      standpoints,\n      emotions,\n      typeDistribution,\n      totalCount,\n      emotionSegments,\n      typeSegments,\n      describeArc,\n      polarToCartesian,\n      getStandpointColor,\n      getStandpointLabel,\n      getEmotionColor,\n      getEmotionLabel,\n      getTypeColor,\n      getTypeLabel,\n      computed\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","props","__props","standpoints","counts","comments","forEach","comment","standpoint","total","length","type","percentage","count","filter","item","emotions","emotion","typeDistribution","types","label","comment_type","Object","values","t","totalCount","emotionSegments","segments","startAngle","value","endAngle","push","path","describeArc","typeSegments","x","y","radius","innerRadius","start","polarToCartesian","end","innerStart","innerEnd","largeArcFlag","join","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","cos","sin","getStandpointColor","getStandpointLabel","getEmotionColor","getEmotionLabel","getTypeColor","getTypeLabel"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/CommentStats.vue"],"sourcesContent":["<template>\r\n\t<div class=\"comment-stats\">\r\n\t\t<!-- 立场堆叠图 -->\r\n\t\t<div v-if=\"showStandpoint\" class=\"stacked-chart\">\r\n\t\t\t<div class=\"stacked-bar\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"standpoint in standpoints\"\r\n\t\t\t\t\t:key=\"standpoint.type\"\r\n\t\t\t\t\tclass=\"stacked-segment\"\r\n\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\twidth: `${standpoint.percentage * 100}%`,\r\n\t\t\t\t\t\tbackgroundColor: getStandpointColor(standpoint.type)\r\n\t\t\t\t\t}\"\r\n\t\t\t\t\t:title=\"`${getStandpointLabel(standpoint.type)}: ${Math.round(\r\n\t\t\t\t\t\tstandpoint.percentage * 100\r\n\t\t\t\t\t)}%`\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"stacked-legend\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"standpoint in standpoints\"\r\n\t\t\t\t\t:key=\"standpoint.type\"\r\n\t\t\t\t\tclass=\"legend-item\">\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclass=\"legend-color\"\r\n\t\t\t\t\t\t:style=\"{\r\n\t\t\t\t\t\t\tbackgroundColor: getStandpointColor(standpoint.type)\r\n\t\t\t\t\t\t}\"></span>\r\n\t\t\t\t\t<span class=\"legend-label\"\r\n\t\t\t\t\t\t>{{ getStandpointLabel(standpoint.type) }} ({{\r\n\t\t\t\t\t\t\tMath.round(standpoint.percentage * 100)\r\n\t\t\t\t\t\t}}%)</span\r\n\t\t\t\t\t>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 情感饼图 -->\r\n\t\t<div v-if=\"showEmotion\" class=\"pie-chart\">\r\n\t\t\t<svg :width=\"size\" :height=\"size\" viewBox=\"0 0 100 100\">\r\n\t\t\t\t<path\r\n\t\t\t\t\tv-for=\"(segment, index) in emotionSegments\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:d=\"segment.path\"\r\n\t\t\t\t\t:fill=\"getEmotionColor(segment.type)\"\r\n\t\t\t\t\tstroke=\"#fff\"\r\n\t\t\t\t\tstroke-width=\"0.5\" />\r\n\t\t\t\t<circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"#fff\" />\r\n\t\t\t\t<text\r\n\t\t\t\t\tx=\"50\"\r\n\t\t\t\t\ty=\"50\"\r\n\t\t\t\t\ttext-anchor=\"middle\"\r\n\t\t\t\t\tdominant-baseline=\"middle\"\r\n\t\t\t\t\tfont-size=\"12\">\r\n\t\t\t\t\t{{ totalCount }}\r\n\t\t\t\t</text>\r\n\t\t\t</svg>\r\n\t\t\t<div class=\"legend\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"emotion in emotions\"\r\n\t\t\t\t\t:key=\"emotion.type\"\r\n\t\t\t\t\tclass=\"legend-item\">\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclass=\"legend-color\"\r\n\t\t\t\t\t\t:style=\"{ backgroundColor: getEmotionColor(emotion.type) }\"></span>\r\n\t\t\t\t\t<span class=\"legend-label\"\r\n\t\t\t\t\t\t>{{ getEmotionLabel(emotion.type) }} ({{\r\n\t\t\t\t\t\t\tMath.round(emotion.percentage * 100)\r\n\t\t\t\t\t\t}}%)</span\r\n\t\t\t\t\t>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<!-- 评论类型饼图 -->\r\n\t\t<div v-if=\"showType\" class=\"type-pie-chart\">\r\n\t\t\t<svg :width=\"size\" :height=\"size\" viewBox=\"0 0 100 100\">\r\n\t\t\t\t<path\r\n\t\t\t\t\tv-for=\"(segment, index) in typeSegments\"\r\n\t\t\t\t\t:key=\"index\"\r\n\t\t\t\t\t:d=\"segment.path\"\r\n\t\t\t\t\t:fill=\"getTypeColor(segment.type)\"\r\n\t\t\t\t\tstroke=\"#fff\"\r\n\t\t\t\t\tstroke-width=\"0.5\" />\r\n\t\t\t\t<circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"#fff\" />\r\n\t\t\t\t<text\r\n\t\t\t\t\tx=\"50\"\r\n\t\t\t\t\ty=\"50\"\r\n\t\t\t\t\ttext-anchor=\"middle\"\r\n\t\t\t\t\tdominant-baseline=\"middle\"\r\n\t\t\t\t\tfont-size=\"12\">\r\n\t\t\t\t\t{{ totalCount }}\r\n\t\t\t\t</text>\r\n\t\t\t</svg>\r\n\t\t\t<div class=\"legend\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tv-for=\"type in typeDistribution\"\r\n\t\t\t\t\t:key=\"type.type\"\r\n\t\t\t\t\tclass=\"legend-item\">\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclass=\"legend-color\"\r\n\t\t\t\t\t\t:style=\"{ backgroundColor: getTypeColor(type.type) }\"></span>\r\n\t\t\t\t\t<span class=\"legend-label\"\r\n\t\t\t\t\t\t>{{ getTypeLabel(type.type) }} ({{ type.count }},\r\n\t\t\t\t\t\t{{ Math.round((type.count / totalCount) * 100) }}%)</span\r\n\t\t\t\t\t>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { computed } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcomments: {\r\n\t\t\ttype: Array,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tshowStandpoint: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowEmotion: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tshowType: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tsize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 80\r\n\t\t}\r\n\t});\r\n\r\n\t// 计算立场分布\r\n\tconst standpoints = computed(() => {\r\n\t\tconst counts = {\r\n\t\t\t1: 0, // 支持\r\n\t\t\t[-1]: 0, // 反对\r\n\t\t\t0: 0 // 中立\r\n\t\t};\r\n\r\n\t\tprops.comments.forEach(comment => {\r\n\t\t\tcounts[comment.standpoint]++;\r\n\t\t});\r\n\r\n\t\tconst total = props.comments.length;\r\n\t\treturn [\r\n\t\t\t{ type: 1, percentage: counts[1] / total, count: counts[1] },\r\n\t\t\t{ type: -1, percentage: counts[-1] / total, count: counts[-1] },\r\n\t\t\t{ type: 0, percentage: counts[0] / total, count: counts[0] }\r\n\t\t].filter(item => item.count > 0);\r\n\t});\r\n\r\n\t// 计算情感分布\r\n\tconst emotions = computed(() => {\r\n\t\tconst counts = {\r\n\t\t\t1: 0, // 积极\r\n\t\t\t[-1]: 0, // 消极\r\n\t\t\t0: 0 // 中立\r\n\t\t};\r\n\r\n\t\tprops.comments.forEach(comment => {\r\n\t\t\tcounts[comment.emotion]++;\r\n\t\t});\r\n\r\n\t\tconst total = props.comments.length;\r\n\t\treturn [\r\n\t\t\t{ type: 1, percentage: counts[1] / total, count: counts[1] },\r\n\t\t\t{ type: -1, percentage: counts[-1] / total, count: counts[-1] },\r\n\t\t\t{ type: 0, percentage: counts[0] / total, count: counts[0] }\r\n\t\t].filter(item => item.count > 0);\r\n\t});\r\n\r\n\t// 计算评论类型分布\r\n\tconst typeDistribution = computed(() => {\r\n\t\tconst types = {\r\n\t\t\t1: { type: 1, count: 0, label: \"陈述\" },\r\n\t\t\t2: { type: 2, count: 0, label: \"疑问\" },\r\n\t\t\t3: { type: 3, count: 0, label: \"感叹\" },\r\n\t\t\t4: { type: 4, count: 0, label: \"建议\" },\r\n\t\t\t5: { type: 5, count: 0, label: \"讽刺\" }\r\n\t\t};\r\n\r\n\t\tprops.comments.forEach(comment => {\r\n\t\t\tconst type = comment.comment_type || 1;\r\n\t\t\ttypes[type].count++;\r\n\t\t});\r\n\r\n\t\treturn Object.values(types).filter(t => t.count > 0);\r\n\t});\r\n\r\n\tconst totalCount = computed(() => {\r\n\t\treturn props.comments.length;\r\n\t});\r\n\r\n\t// 计算情感饼图分段\r\n\tconst emotionSegments = computed(() => {\r\n\t\tconst segments = [];\r\n\t\tlet startAngle = 0;\r\n\r\n\t\temotions.value.forEach(emotion => {\r\n\t\t\tconst endAngle = startAngle + emotion.percentage * 360;\r\n\r\n\t\t\tif (emotion.percentage > 0) {\r\n\t\t\t\tsegments.push({\r\n\t\t\t\t\ttype: emotion.type,\r\n\t\t\t\t\tpath: describeArc(50, 50, 40, 40, startAngle, endAngle),\r\n\t\t\t\t\tpercentage: emotion.percentage\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tstartAngle = endAngle;\r\n\t\t});\r\n\r\n\t\treturn segments;\r\n\t});\r\n\r\n\t// 计算评论类型饼图分段\r\n\tconst typeSegments = computed(() => {\r\n\t\tconst segments = [];\r\n\t\tlet startAngle = 0;\r\n\r\n\t\ttypeDistribution.value.forEach(type => {\r\n\t\t\tconst percentage = type.count / totalCount.value;\r\n\t\t\tconst endAngle = startAngle + percentage * 360;\r\n\r\n\t\t\tif (percentage > 0) {\r\n\t\t\t\tsegments.push({\r\n\t\t\t\t\ttype: type.type,\r\n\t\t\t\t\tpath: describeArc(50, 50, 40, 40, startAngle, endAngle),\r\n\t\t\t\t\tpercentage: percentage\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tstartAngle = endAngle;\r\n\t\t});\r\n\r\n\t\treturn segments;\r\n\t});\r\n\r\n\t// 饼图路径计算函数\r\n\tfunction describeArc(x, y, radius, innerRadius, startAngle, endAngle) {\r\n\t\tconst start = polarToCartesian(x, y, radius, endAngle);\r\n\t\tconst end = polarToCartesian(x, y, radius, startAngle);\r\n\t\tconst innerStart = polarToCartesian(x, y, innerRadius, endAngle);\r\n\t\tconst innerEnd = polarToCartesian(x, y, innerRadius, startAngle);\r\n\r\n\t\tconst largeArcFlag = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n\t\treturn [\r\n\t\t\t\"M\",\r\n\t\t\tstart.x,\r\n\t\t\tstart.y,\r\n\t\t\t\"A\",\r\n\t\t\tradius,\r\n\t\t\tradius,\r\n\t\t\t0,\r\n\t\t\tlargeArcFlag,\r\n\t\t\t0,\r\n\t\t\tend.x,\r\n\t\t\tend.y,\r\n\t\t\t\"L\",\r\n\t\t\tinnerEnd.x,\r\n\t\t\tinnerEnd.y,\r\n\t\t\t\"A\",\r\n\t\t\tinnerRadius,\r\n\t\t\tinnerRadius,\r\n\t\t\t0,\r\n\t\t\tlargeArcFlag,\r\n\t\t\t1,\r\n\t\t\tinnerStart.x,\r\n\t\t\tinnerStart.y,\r\n\t\t\t\"Z\"\r\n\t\t].join(\" \");\r\n\t}\r\n\r\n\tfunction polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n\t\tconst angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n\t\treturn {\r\n\t\t\tx: centerX + radius * Math.cos(angleInRadians),\r\n\t\t\ty: centerY + radius * Math.sin(angleInRadians)\r\n\t\t};\r\n\t}\r\n\r\n\t// 立场颜色映射\r\n\tfunction getStandpointColor(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"#ccebc5\", // 支持 - 绿色\r\n\t\t\t\t[-1]: \"#fbb4ae\", // 反对 - 红色\r\n\t\t\t\t0: \"#b3cde3\" // 中立 - 蓝色\r\n\t\t\t}[type] || \"#9E9E9E\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getStandpointLabel(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"支持\",\r\n\t\t\t\t[-1]: \"反对\",\r\n\t\t\t\t0: \"中立\"\r\n\t\t\t}[type] || \"未知\"\r\n\t\t);\r\n\t}\r\n\r\n\t// 情感颜色映射\r\n\tfunction getEmotionColor(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"#4daf4a\", // 积极 - 绿色\r\n\t\t\t\t[-1]: \"#e41a1c\", // 消极 - 红色\r\n\t\t\t\t0: \"#377eb8\" // 中立 - 蓝色\r\n\t\t\t}[type] || \"#9E9E9E\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getEmotionLabel(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"积极\",\r\n\t\t\t\t[-1]: \"消极\",\r\n\t\t\t\t0: \"中立\"\r\n\t\t\t}[type] || \"未知\"\r\n\t\t);\r\n\t}\r\n\r\n\t// 评论类型颜色映射\r\n\tfunction getTypeColor(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"#4285F4\", // 陈述 - 蓝色\r\n\t\t\t\t2: \"#EA4335\", // 疑问 - 红色\r\n\t\t\t\t3: \"#34A853\", // 感叹 - 绿色\r\n\t\t\t\t4: \"#9C27B0\", // 建议 - 紫色\r\n\t\t\t\t5: \"#FF9800\" // 讽刺 - 橙色\r\n\t\t\t}[type] || \"#9E9E9E\"\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getTypeLabel(type) {\r\n\t\treturn (\r\n\t\t\t{\r\n\t\t\t\t1: \"陈述\",\r\n\t\t\t\t2: \"疑问\",\r\n\t\t\t\t3: \"感叹\",\r\n\t\t\t\t4: \"建议\",\r\n\t\t\t\t5: \"讽刺\"\r\n\t\t\t}[type] || \"未知\"\r\n\t\t);\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n\t.comment-stats {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tgap: 8px;\r\n\t}\r\n\r\n\t.stacked-chart,\r\n\t.pie-chart,\r\n\t.type-pie-chart {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tgap: 6px;\r\n\t}\r\n\r\n\t.stacked-bar {\r\n\t\tdisplay: flex;\r\n\t\twidth: 100%;\r\n\t\theight: 12px;\r\n\t\tborder-radius: 6px;\r\n\t\toverflow: hidden;\r\n\t\tbackground-color: #f0f0f0;\r\n\t}\r\n\r\n\t.stacked-segment {\r\n\t\theight: 100%;\r\n\t\ttransition: width 0.3s ease;\r\n\t}\r\n\r\n\t.legend {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: center;\r\n\t\tgap: 4px 8px;\r\n\t\tfont-size: 10px;\r\n\t}\r\n\r\n\t.stacked-legend {\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: center;\r\n\t\tgap: 4px 8px;\r\n\t\tfont-size: 10px;\r\n\t}\r\n\r\n\t.legend-item {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tgap: 4px;\r\n\t}\r\n\r\n\t.legend-color {\r\n\t\tdisplay: inline-block;\r\n\t\twidth: 10px;\r\n\t\theight: 10px;\r\n\t\tborder-radius: 2px;\r\n\t}\r\n\r\n\t.legend-label {\r\n\t\twhite-space: nowrap;\r\n\t}\r\n\r\n\ttext {\r\n\t\tfont-family: Arial, sans-serif;\r\n\t\tfill: #333;\r\n\t}\r\n</style>\r\n"],"mappings":";AAgHC,SAASA,QAAQ,QAAQ,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAE9B,MAAMC,KAAK,GAAGC,OAqBZ;;IAEF;IACA,MAAMC,WAAW,GAAGH,QAAQ,CAAC,MAAM;MAClC,MAAMI,MAAM,GAAG;QACd,CAAC,EAAE,CAAC;QAAE;QACN,CAAC,CAAC,CAAC,GAAG,CAAC;QAAE;QACT,CAAC,EAAE,CAAC,CAAC;MACN,CAAC;MAEDH,KAAK,CAACI,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;QACjCH,MAAM,CAACG,OAAO,CAACC,UAAU,CAAC,EAAE;MAC7B,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAGR,KAAK,CAACI,QAAQ,CAACK,MAAM;MACnC,OAAO,CACN;QAAEC,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC;MAAE,CAAC,EAC5D;QAAEO,IAAI,EAAE,CAAC,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC,CAAC;MAAE,CAAC,EAC/D;QAAEO,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC;MAAE,CAAC,CAC5D,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,KAAK,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,MAAMG,QAAQ,GAAGhB,QAAQ,CAAC,MAAM;MAC/B,MAAMI,MAAM,GAAG;QACd,CAAC,EAAE,CAAC;QAAE;QACN,CAAC,CAAC,CAAC,GAAG,CAAC;QAAE;QACT,CAAC,EAAE,CAAC,CAAC;MACN,CAAC;MAEDH,KAAK,CAACI,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;QACjCH,MAAM,CAACG,OAAO,CAACU,OAAO,CAAC,EAAE;MAC1B,CAAC,CAAC;MAEF,MAAMR,KAAK,GAAGR,KAAK,CAACI,QAAQ,CAACK,MAAM;MACnC,OAAO,CACN;QAAEC,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC;MAAE,CAAC,EAC5D;QAAEO,IAAI,EAAE,CAAC,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC,CAAC;MAAE,CAAC,EAC/D;QAAEO,IAAI,EAAE,CAAC;QAAEC,UAAU,EAAER,MAAM,CAAC,CAAC,CAAC,GAAGK,KAAK;QAAEI,KAAK,EAAET,MAAM,CAAC,CAAC;MAAE,CAAC,CAC5D,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,KAAK,GAAG,CAAC,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,MAAMK,gBAAgB,GAAGlB,QAAQ,CAAC,MAAM;MACvC,MAAMmB,KAAK,GAAG;QACb,CAAC,EAAE;UAAER,IAAI,EAAE,CAAC;UAAEE,KAAK,EAAE,CAAC;UAAEO,KAAK,EAAE;QAAK,CAAC;QACrC,CAAC,EAAE;UAAET,IAAI,EAAE,CAAC;UAAEE,KAAK,EAAE,CAAC;UAAEO,KAAK,EAAE;QAAK,CAAC;QACrC,CAAC,EAAE;UAAET,IAAI,EAAE,CAAC;UAAEE,KAAK,EAAE,CAAC;UAAEO,KAAK,EAAE;QAAK,CAAC;QACrC,CAAC,EAAE;UAAET,IAAI,EAAE,CAAC;UAAEE,KAAK,EAAE,CAAC;UAAEO,KAAK,EAAE;QAAK,CAAC;QACrC,CAAC,EAAE;UAAET,IAAI,EAAE,CAAC;UAAEE,KAAK,EAAE,CAAC;UAAEO,KAAK,EAAE;QAAK;MACrC,CAAC;MAEDnB,KAAK,CAACI,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;QACjC,MAAMI,IAAI,GAAGJ,OAAO,CAACc,YAAY,IAAI,CAAC;QACtCF,KAAK,CAACR,IAAI,CAAC,CAACE,KAAK,EAAE;MACpB,CAAC,CAAC;MAEF,OAAOS,MAAM,CAACC,MAAM,CAACJ,KAAK,CAAC,CAACL,MAAM,CAACU,CAAC,IAAIA,CAAC,CAACX,KAAK,GAAG,CAAC,CAAC;IACrD,CAAC,CAAC;IAEF,MAAMY,UAAU,GAAGzB,QAAQ,CAAC,MAAM;MACjC,OAAOC,KAAK,CAACI,QAAQ,CAACK,MAAM;IAC7B,CAAC,CAAC;;IAEF;IACA,MAAMgB,eAAe,GAAG1B,QAAQ,CAAC,MAAM;MACtC,MAAM2B,QAAQ,GAAG,EAAE;MACnB,IAAIC,UAAU,GAAG,CAAC;MAElBZ,QAAQ,CAACa,KAAK,CAACvB,OAAO,CAACW,OAAO,IAAI;QACjC,MAAMa,QAAQ,GAAGF,UAAU,GAAGX,OAAO,CAACL,UAAU,GAAG,GAAG;QAEtD,IAAIK,OAAO,CAACL,UAAU,GAAG,CAAC,EAAE;UAC3Be,QAAQ,CAACI,IAAI,CAAC;YACbpB,IAAI,EAAEM,OAAO,CAACN,IAAI;YAClBqB,IAAI,EAAEC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEL,UAAU,EAAEE,QAAQ,CAAC;YACvDlB,UAAU,EAAEK,OAAO,CAACL;UACrB,CAAC,CAAC;QACH;QAEAgB,UAAU,GAAGE,QAAQ;MACtB,CAAC,CAAC;MAEF,OAAOH,QAAQ;IAChB,CAAC,CAAC;;IAEF;IACA,MAAMO,YAAY,GAAGlC,QAAQ,CAAC,MAAM;MACnC,MAAM2B,QAAQ,GAAG,EAAE;MACnB,IAAIC,UAAU,GAAG,CAAC;MAElBV,gBAAgB,CAACW,KAAK,CAACvB,OAAO,CAACK,IAAI,IAAI;QACtC,MAAMC,UAAU,GAAGD,IAAI,CAACE,KAAK,GAAGY,UAAU,CAACI,KAAK;QAChD,MAAMC,QAAQ,GAAGF,UAAU,GAAGhB,UAAU,GAAG,GAAG;QAE9C,IAAIA,UAAU,GAAG,CAAC,EAAE;UACnBe,QAAQ,CAACI,IAAI,CAAC;YACbpB,IAAI,EAAEA,IAAI,CAACA,IAAI;YACfqB,IAAI,EAAEC,WAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAEL,UAAU,EAAEE,QAAQ,CAAC;YACvDlB,UAAU,EAAEA;UACb,CAAC,CAAC;QACH;QAEAgB,UAAU,GAAGE,QAAQ;MACtB,CAAC,CAAC;MAEF,OAAOH,QAAQ;IAChB,CAAC,CAAC;;IAEF;IACA,SAASM,WAAWA,CAACE,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAEC,WAAW,EAAEV,UAAU,EAAEE,QAAQ,EAAE;MACrE,MAAMS,KAAK,GAAGC,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAEP,QAAQ,CAAC;MACtD,MAAMW,GAAG,GAAGD,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAEC,MAAM,EAAET,UAAU,CAAC;MACtD,MAAMc,UAAU,GAAGF,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAEE,WAAW,EAAER,QAAQ,CAAC;MAChE,MAAMa,QAAQ,GAAGH,gBAAgB,CAACL,CAAC,EAAEC,CAAC,EAAEE,WAAW,EAAEV,UAAU,CAAC;MAEhE,MAAMgB,YAAY,GAAGd,QAAQ,GAAGF,UAAU,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;MAE7D,OAAO,CACN,GAAG,EACHW,KAAK,CAACJ,CAAC,EACPI,KAAK,CAACH,CAAC,EACP,GAAG,EACHC,MAAM,EACNA,MAAM,EACN,CAAC,EACDO,YAAY,EACZ,CAAC,EACDH,GAAG,CAACN,CAAC,EACLM,GAAG,CAACL,CAAC,EACL,GAAG,EACHO,QAAQ,CAACR,CAAC,EACVQ,QAAQ,CAACP,CAAC,EACV,GAAG,EACHE,WAAW,EACXA,WAAW,EACX,CAAC,EACDM,YAAY,EACZ,CAAC,EACDF,UAAU,CAACP,CAAC,EACZO,UAAU,CAACN,CAAC,EACZ,GAAG,CACH,CAACS,IAAI,CAAC,GAAG,CAAC;IACZ;IAEA,SAASL,gBAAgBA,CAACM,OAAO,EAAEC,OAAO,EAAEV,MAAM,EAAEW,cAAc,EAAE;MACnE,MAAMC,cAAc,GAAI,CAACD,cAAc,GAAG,EAAE,IAAIE,IAAI,CAACC,EAAE,GAAI,KAAK;MAChE,OAAO;QACNhB,CAAC,EAAEW,OAAO,GAAGT,MAAM,GAAGa,IAAI,CAACE,GAAG,CAACH,cAAc,CAAC;QAC9Cb,CAAC,EAAEW,OAAO,GAAGV,MAAM,GAAGa,IAAI,CAACG,GAAG,CAACJ,cAAc;MAC9C,CAAC;IACF;;IAEA;IACA,SAASK,kBAAkBA,CAAC3C,IAAI,EAAE;MACjC,OACC;QACC,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,CAAC,CAAC,GAAG,SAAS;QAAE;QACjB,CAAC,EAAE,SAAS,CAAC;MACd,CAAC,CAACA,IAAI,CAAC,IAAI,SAAS;IAEtB;IAEA,SAAS4C,kBAAkBA,CAAC5C,IAAI,EAAE;MACjC,OACC;QACC,CAAC,EAAE,IAAI;QACP,CAAC,CAAC,CAAC,GAAG,IAAI;QACV,CAAC,EAAE;MACJ,CAAC,CAACA,IAAI,CAAC,IAAI,IAAI;IAEjB;;IAEA;IACA,SAAS6C,eAAeA,CAAC7C,IAAI,EAAE;MAC9B,OACC;QACC,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,CAAC,CAAC,GAAG,SAAS;QAAE;QACjB,CAAC,EAAE,SAAS,CAAC;MACd,CAAC,CAACA,IAAI,CAAC,IAAI,SAAS;IAEtB;IAEA,SAAS8C,eAAeA,CAAC9C,IAAI,EAAE;MAC9B,OACC;QACC,CAAC,EAAE,IAAI;QACP,CAAC,CAAC,CAAC,GAAG,IAAI;QACV,CAAC,EAAE;MACJ,CAAC,CAACA,IAAI,CAAC,IAAI,IAAI;IAEjB;;IAEA;IACA,SAAS+C,YAAYA,CAAC/C,IAAI,EAAE;MAC3B,OACC;QACC,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,EAAE,SAAS;QAAE;QACd,CAAC,EAAE,SAAS,CAAC;MACd,CAAC,CAACA,IAAI,CAAC,IAAI,SAAS;IAEtB;IAEA,SAASgD,YAAYA,CAAChD,IAAI,EAAE;MAC3B,OACC;QACC,CAAC,EAAE,IAAI;QACP,CAAC,EAAE,IAAI;QACP,CAAC,EAAE,IAAI;QACP,CAAC,EAAE,IAAI;QACP,CAAC,EAAE;MACJ,CAAC,CAACA,IAAI,CAAC,IAAI,IAAI;IAEjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}