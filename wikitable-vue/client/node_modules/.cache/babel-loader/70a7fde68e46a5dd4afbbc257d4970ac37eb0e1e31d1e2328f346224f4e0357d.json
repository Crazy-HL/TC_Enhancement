{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, watch, onMounted } from \"vue\";\nimport api from \"@/api\";\nexport default {\n  __name: 'HighFrequencyWords',\n  props: {\n    sentence: {\n      type: String,\n      required: true\n    },\n    sentenceIndex: {\n      type: Number,\n      required: true\n    },\n    comments: {\n      type: Array,\n      default: () => []\n    },\n    active: {\n      type: Boolean,\n      default: true\n    },\n    minFrequency: {\n      type: Number,\n      default: 3\n    },\n    maxFontSize: {\n      type: Number,\n      default: 1.5\n    },\n    minFontSize: {\n      type: Number,\n      default: 1\n    },\n    colorRange: {\n      type: Array,\n      default: () => [\"#FFD700\", \"#FF6347\"]\n    }\n  },\n  emits: [\"word-click\"],\n  setup(__props, _ref) {\n    let {\n      expose: __expose,\n      emit: __emit\n    } = _ref;\n    __expose();\n    const props = __props;\n    const emit = __emit;\n\n    // 数据状态\n    const wordFrequency = ref({});\n    const highlightedWords = ref([]);\n    const segmentedText = ref([]);\n    const isLoading = ref(false);\n    const error = ref(null);\n\n    // 智能中文分词函数\n    const segmentText = text => {\n      if (!text) return [];\n      const regex = /([\\u4e00-\\u9fa5]{1,4}|[a-zA-Z']+|\\p{P}|\\s)/gu;\n      const segments = [];\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const token = match[0];\n        segments.push({\n          text: token,\n          isWord: /[\\u4e00-\\u9fa5]{2,}|[a-zA-Z]{3,}/.test(token)\n        });\n      }\n      return segments;\n    };\n\n    // 获取词频数据\n    const fetchWordFrequency = async () => {\n      if (isLoading.value) return;\n      isLoading.value = true;\n      error.value = null;\n      try {\n        const response = await api.post(\"word_frequency\", {\n          sentence_index: props.sentenceIndex,\n          comments: props.comments\n        });\n        const responseData = response?.data || {};\n        if (responseData.word_frequency) {\n          wordFrequency.value = responseData.word_frequency;\n          updateHighlightedWords();\n        }\n      } catch (err) {\n        console.error(\"获取词频失败:\", err);\n        error.value = err.message || \"加载词频数据失败\";\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // 更新高亮词汇\n    const updateHighlightedWords = () => {\n      highlightedWords.value = Object.entries(wordFrequency.value).filter(_ref2 => {\n        let [_, count] = _ref2;\n        return count >= props.minFrequency;\n      }).map(_ref3 => {\n        let [word] = _ref3;\n        return word;\n      });\n    };\n\n    // 判断是否高亮\n    const isHighlighted = word => {\n      return props.active && highlightedWords.value.some(hw => word.includes(hw) || hw.includes(word));\n    };\n\n    // 获取词样式\n    const getWordStyle = word => {\n      if (!isHighlighted(word)) return {};\n      const count = wordFrequency.value[word] || 0;\n      const maxCount = Math.max(...Object.values(wordFrequency.value), props.minFrequency);\n      const ratio = Math.min(count / maxCount, 1);\n      const fontSize = props.minFontSize + (props.maxFontSize - props.minFontSize) * ratio;\n      const color = interpolateColor(props.colorRange[0], props.colorRange[1], ratio);\n      return {\n        fontSize: `${fontSize}em`,\n        color: color,\n        fontWeight: 500 + Math.round(ratio * 300),\n        backgroundColor: `hsla(30, 80%, 80%, ${ratio * 0.3})`,\n        padding: \"0 2px\",\n        borderRadius: \"4px\",\n        display: \"inline-block\",\n        transition: \"all 0.2s\",\n        textDecoration: \"underline\",\n        textDecorationColor: color,\n        textUnderlineOffset: \"3px\",\n        cursor: \"pointer\"\n      };\n    };\n\n    // 颜色插值\n    const interpolateColor = (color1, color2, factor) => {\n      if (!color1 || !color2) return \"#FFD700\";\n      const hex = color => color.replace(\"#\", \"\");\n      const h2r = hex => parseInt(hex, 16);\n      const r2h = num => Math.round(num).toString(16).padStart(2, \"0\");\n      const c1 = hex(color1);\n      const c2 = hex(color2);\n      const r = h2r(c1.substring(0, 2)) + (h2r(c2.substring(0, 2)) - h2r(c1.substring(0, 2))) * factor;\n      const g = h2r(c1.substring(2, 4)) + (h2r(c2.substring(2, 4)) - h2r(c1.substring(2, 4))) * factor;\n      const b = h2r(c1.substring(4, 6)) + (h2r(c2.substring(4, 6)) - h2r(c1.substring(4, 6))) * factor;\n      return `#${r2h(r)}${r2h(g)}${r2h(b)}`;\n    };\n\n    // 初始化\n    onMounted(() => {\n      segmentedText.value = segmentText(props.sentence);\n      if (props.active) fetchWordFrequency();\n    });\n\n    // 监听变化\n    watch(() => props.sentence, newVal => {\n      segmentedText.value = segmentText(newVal);\n    });\n    watch(() => props.comments, () => {\n      if (props.active) fetchWordFrequency();\n    }, {\n      deep: true\n    });\n    watch(() => props.active, newVal => {\n      if (newVal) fetchWordFrequency();\n    });\n    const __returned__ = {\n      props,\n      emit,\n      wordFrequency,\n      highlightedWords,\n      segmentedText,\n      isLoading,\n      error,\n      segmentText,\n      fetchWordFrequency,\n      updateHighlightedWords,\n      isHighlighted,\n      getWordStyle,\n      interpolateColor,\n      ref,\n      computed,\n      watch,\n      onMounted,\n      get api() {\n        return api;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","api","props","__props","emit","__emit","wordFrequency","highlightedWords","segmentedText","isLoading","error","segmentText","text","regex","segments","match","exec","token","push","isWord","test","fetchWordFrequency","value","response","post","sentence_index","sentenceIndex","comments","responseData","data","word_frequency","updateHighlightedWords","err","console","message","Object","entries","filter","_ref2","_","count","minFrequency","map","_ref3","word","isHighlighted","active","some","hw","includes","getWordStyle","maxCount","Math","max","values","ratio","min","fontSize","minFontSize","maxFontSize","color","interpolateColor","colorRange","fontWeight","round","backgroundColor","padding","borderRadius","display","transition","textDecoration","textDecorationColor","textUnderlineOffset","cursor","color1","color2","factor","hex","replace","h2r","parseInt","r2h","num","toString","padStart","c1","c2","r","substring","g","b","sentence","newVal","deep"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/HighFrequencyWords.vue"],"sourcesContent":["<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\timport api from \"@/api\";\r\n\r\n\tconst props = defineProps({\r\n\t\tsentence: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tsentenceIndex: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tcomments: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tactive: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: true\r\n\t\t},\r\n\t\tminFrequency: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3\r\n\t\t},\r\n\t\tmaxFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1.5\r\n\t\t},\r\n\t\tminFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tcolorRange: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [\"#FFD700\", \"#FF6347\"]\r\n\t\t}\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"word-click\"]);\r\n\r\n\t// 数据状态\r\n\tconst wordFrequency = ref({});\r\n\tconst highlightedWords = ref([]);\r\n\tconst segmentedText = ref([]);\r\n\tconst isLoading = ref(false);\r\n\tconst error = ref(null);\r\n\r\n\t// 智能中文分词函数\r\n\tconst segmentText = text => {\r\n\t\tif (!text) return [];\r\n\r\n\t\tconst regex = /([\\u4e00-\\u9fa5]{1,4}|[a-zA-Z']+|\\p{P}|\\s)/gu;\r\n\t\tconst segments = [];\r\n\t\tlet match;\r\n\r\n\t\twhile ((match = regex.exec(text)) !== null) {\r\n\t\t\tconst token = match[0];\r\n\t\t\tsegments.push({\r\n\t\t\t\ttext: token,\r\n\t\t\t\tisWord: /[\\u4e00-\\u9fa5]{2,}|[a-zA-Z]{3,}/.test(token)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn segments;\r\n\t};\r\n\r\n\t// 获取词频数据\r\n\tconst fetchWordFrequency = async () => {\r\n\t\tif (isLoading.value) return;\r\n\r\n\t\tisLoading.value = true;\r\n\t\terror.value = null;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"word_frequency\", {\r\n\t\t\t\tsentence_index: props.sentenceIndex,\r\n\t\t\t\tcomments: props.comments\r\n\t\t\t});\r\n\r\n\t\t\tconst responseData = response?.data || {};\r\n\t\t\tif (responseData.word_frequency) {\r\n\t\t\t\twordFrequency.value = responseData.word_frequency;\r\n\t\t\t\tupdateHighlightedWords();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\"获取词频失败:\", err);\r\n\t\t\terror.value = err.message || \"加载词频数据失败\";\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\t// 更新高亮词汇\r\n\tconst updateHighlightedWords = () => {\r\n\t\thighlightedWords.value = Object.entries(wordFrequency.value)\r\n\t\t\t.filter(([_, count]) => count >= props.minFrequency)\r\n\t\t\t.map(([word]) => word);\r\n\t};\r\n\r\n\t// 判断是否高亮\r\n\tconst isHighlighted = word => {\r\n\t\treturn (\r\n\t\t\tprops.active &&\r\n\t\t\thighlightedWords.value.some(hw => word.includes(hw) || hw.includes(word))\r\n\t\t);\r\n\t};\r\n\r\n\t// 获取词样式\r\n\tconst getWordStyle = word => {\r\n\t\tif (!isHighlighted(word)) return {};\r\n\r\n\t\tconst count = wordFrequency.value[word] || 0;\r\n\t\tconst maxCount = Math.max(\r\n\t\t\t...Object.values(wordFrequency.value),\r\n\t\t\tprops.minFrequency\r\n\t\t);\r\n\t\tconst ratio = Math.min(count / maxCount, 1);\r\n\r\n\t\tconst fontSize =\r\n\t\t\tprops.minFontSize + (props.maxFontSize - props.minFontSize) * ratio;\r\n\t\tconst color = interpolateColor(\r\n\t\t\tprops.colorRange[0],\r\n\t\t\tprops.colorRange[1],\r\n\t\t\tratio\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tfontSize: `${fontSize}em`,\r\n\t\t\tcolor: color,\r\n\t\t\tfontWeight: 500 + Math.round(ratio * 300),\r\n\t\t\tbackgroundColor: `hsla(30, 80%, 80%, ${ratio * 0.3})`,\r\n\t\t\tpadding: \"0 2px\",\r\n\t\t\tborderRadius: \"4px\",\r\n\t\t\tdisplay: \"inline-block\",\r\n\t\t\ttransition: \"all 0.2s\",\r\n\t\t\ttextDecoration: \"underline\",\r\n\t\t\ttextDecorationColor: color,\r\n\t\t\ttextUnderlineOffset: \"3px\",\r\n\t\t\tcursor: \"pointer\"\r\n\t\t};\r\n\t};\r\n\r\n\t// 颜色插值\r\n\tconst interpolateColor = (color1, color2, factor) => {\r\n\t\tif (!color1 || !color2) return \"#FFD700\";\r\n\r\n\t\tconst hex = color => color.replace(\"#\", \"\");\r\n\t\tconst h2r = hex => parseInt(hex, 16);\r\n\t\tconst r2h = num => Math.round(num).toString(16).padStart(2, \"0\");\r\n\r\n\t\tconst c1 = hex(color1);\r\n\t\tconst c2 = hex(color2);\r\n\r\n\t\tconst r =\r\n\t\t\th2r(c1.substring(0, 2)) +\r\n\t\t\t(h2r(c2.substring(0, 2)) - h2r(c1.substring(0, 2))) * factor;\r\n\t\tconst g =\r\n\t\t\th2r(c1.substring(2, 4)) +\r\n\t\t\t(h2r(c2.substring(2, 4)) - h2r(c1.substring(2, 4))) * factor;\r\n\t\tconst b =\r\n\t\t\th2r(c1.substring(4, 6)) +\r\n\t\t\t(h2r(c2.substring(4, 6)) - h2r(c1.substring(4, 6))) * factor;\r\n\r\n\t\treturn `#${r2h(r)}${r2h(g)}${r2h(b)}`;\r\n\t};\r\n\r\n\t// 初始化\r\n\tonMounted(() => {\r\n\t\tsegmentedText.value = segmentText(props.sentence);\r\n\t\tif (props.active) fetchWordFrequency();\r\n\t});\r\n\r\n\t// 监听变化\r\n\twatch(\r\n\t\t() => props.sentence,\r\n\t\tnewVal => {\r\n\t\t\tsegmentedText.value = segmentText(newVal);\r\n\t\t}\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.comments,\r\n\t\t() => {\r\n\t\t\tif (props.active) fetchWordFrequency();\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.active,\r\n\t\tnewVal => {\r\n\t\t\tif (newVal) fetchWordFrequency();\r\n\t\t}\r\n\t);\r\n</script>\r\n\r\n<template>\r\n\t<span class=\"word-container\">\r\n\t\t<template v-if=\"error\">\r\n\t\t\t<span class=\"error-message\">{{ error }}</span>\r\n\t\t</template>\r\n\t\t<template v-else>\r\n\t\t\t<template v-for=\"(segment, index) in segmentedText\" :key=\"index\">\r\n\t\t\t\t<span\r\n\t\t\t\t\tv-if=\"segment.isWord && isHighlighted(segment.text)\"\r\n\t\t\t\t\tclass=\"highlighted-word\"\r\n\t\t\t\t\t:style=\"getWordStyle(segment.text)\"\r\n\t\t\t\t\t@click=\"\r\n\t\t\t\t\t\temit('word-click', {\r\n\t\t\t\t\t\t\tword: segment.text,\r\n\t\t\t\t\t\t\tfrequency: wordFrequency[segment.text] || 0\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\"\r\n\t\t\t\t\t:title=\"`出现 ${wordFrequency[segment.text] || 0} 次`\">\r\n\t\t\t\t\t{{ segment.text }}\r\n\t\t\t\t</span>\r\n\t\t\t\t<span v-else class=\"normal-word\">\r\n\t\t\t\t\t{{ segment.text }}\r\n\t\t\t\t</span>\r\n\t\t\t</template>\r\n\t\t\t<span v-if=\"isLoading\" class=\"loading-indicator\">...</span>\r\n\t\t</template>\r\n\t</span>\r\n</template>\r\n\r\n<style scoped>\r\n\t.word-container {\r\n\t\tdisplay: inline;\r\n\t\tline-height: 1.8;\r\n\t}\r\n\r\n\t.highlighted-word {\r\n\t\ttransition: all 0.2s;\r\n\t\tposition: relative;\r\n\t\tanimation: pulse 1.5s infinite alternate;\r\n\t}\r\n\r\n\t.highlighted-word:hover {\r\n\t\ttransform: translateY(-1px);\r\n\t\tz-index: 2;\r\n\t\tbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.normal-word {\r\n\t\tdisplay: inline;\r\n\t}\r\n\r\n\t.loading-indicator {\r\n\t\tdisplay: inline-block;\r\n\t\tmargin-left: 4px;\r\n\t\tcolor: #999;\r\n\t}\r\n\r\n\t.error-message {\r\n\t\tcolor: #ff4757;\r\n\t\tfont-size: 0.9em;\r\n\t\tpadding: 2px 4px;\r\n\t\tbackground-color: #ffecec;\r\n\t\tborder-radius: 3px;\r\n\t}\r\n\r\n\t@keyframes pulse {\r\n\t\tfrom {\r\n\t\t\topacity: 0.9;\r\n\t\t}\r\n\t\tto {\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}