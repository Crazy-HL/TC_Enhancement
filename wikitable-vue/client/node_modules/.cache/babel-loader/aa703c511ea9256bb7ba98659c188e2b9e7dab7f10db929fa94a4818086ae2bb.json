{"ast":null,"code":"import { ref, onMounted, computed, watch, nextTick } from \"vue\";\nimport api from \"@/api\";\nimport CommentStats from \"./CommentStats.vue\";\n\n// 初始化所有数据为null或空数组\n\nexport default {\n  __name: 'ArticleContent',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const article = ref(null);\n    const sentences = ref([]);\n    const comments = ref([]);\n    const activeSentence = ref(null);\n\n    // 添加数据加载状态\n    const isLoading = ref(true);\n\n    // 计算属性添加空值检查\n    const globalComments = computed(() => {\n      return comments.value?.filter(comment => comment.link === -1) || [];\n    });\n\n    // 方法中添加空值检查\n    const getCommentsForSentence = index => {\n      return comments.value?.filter(comment => comment.link === index) || [];\n    };\n    const hasComments = index => {\n      const sentenceComments = getCommentsForSentence(index);\n      return sentenceComments?.length > 0;\n    };\n    const getTopComment = index => {\n      const sentenceComments = getCommentsForSentence(index);\n      if (!sentenceComments?.length) return null;\n      return [...sentenceComments].sort((a, b) => b.like_count - a.like_count)[0];\n    };\n    const getSentenceClasses = index => {\n      const classes = {\n        \"has-comment\": hasComments(index),\n        active: activeSentence.value === index\n      };\n      if (hasComments(index)) {\n        const topComment = getTopComment(index);\n        if (topComment) {\n          classes[`comment-level-${getCommentLevel(index).level}`] = true;\n          classes[`comment-type-${getCommentType(topComment)}`] = true;\n        }\n      }\n      return classes;\n    };\n\n    // 其他方法保持不变...\n\n    onMounted(async () => {\n      try {\n        isLoading.value = true;\n\n        // 使用Promise.all并行加载数据\n        const [articleData, commentsData] = await Promise.all([api.get(\"article\"), api.get(\"comments\")]);\n        article.value = articleData[0] || null;\n        sentences.value = splitIntoSentences(article.value?.content_text || \"\");\n        comments.value = commentsData || [];\n      } catch (error) {\n        console.error(\"加载数据失败:\", error);\n      } finally {\n        isLoading.value = false;\n      }\n    });\n    const __returned__ = {\n      article,\n      sentences,\n      comments,\n      activeSentence,\n      isLoading,\n      globalComments,\n      getCommentsForSentence,\n      hasComments,\n      getTopComment,\n      getSentenceClasses,\n      ref,\n      onMounted,\n      computed,\n      watch,\n      nextTick,\n      get api() {\n        return api;\n      },\n      CommentStats\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","watch","nextTick","api","CommentStats","article","sentences","comments","activeSentence","isLoading","globalComments","value","filter","comment","link","getCommentsForSentence","index","hasComments","sentenceComments","length","getTopComment","sort","a","b","like_count","getSentenceClasses","classes","active","topComment","getCommentLevel","level","getCommentType","articleData","commentsData","Promise","all","get","splitIntoSentences","content_text","error","console"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/ArticleContent.vue"],"sourcesContent":["<template>\r\n\t<div class=\"article-container\">\r\n\t\t<!-- 顶部控制面板 -->\r\n\t\t<div class=\"control-panel\">\r\n\t\t\t<!-- 原有控制面板内容保持不变 -->\r\n\t\t</div>\r\n\r\n\t\t<!-- 三栏主要内容区 -->\r\n\t\t<div class=\"main-content\">\r\n\t\t\t<!-- 第一栏：文章整体评论 -->\r\n\t\t\t<div\r\n\t\t\t\tclass=\"panel global-comments-panel\"\r\n\t\t\t\tv-if=\"globalComments && globalComments.length > 0\">\r\n\t\t\t\t<!-- 全局评论内容 -->\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 第二栏：文章内容 -->\r\n\t\t\t<div class=\"panel article-panel\" v-if=\"article\" ref=\"articleContainer\">\r\n\t\t\t\t<div v-if=\"article\">\r\n\t\t\t\t\t<h1 class=\"article-title\">{{ article.title }}</h1>\r\n\t\t\t\t\t<div class=\"article-meta\">\r\n\t\t\t\t\t\t<!-- 文章元信息 -->\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"article-content\" v-if=\"sentences && sentences.length\">\r\n\t\t\t\t\t\t<template v-for=\"(sentence, index) in sentences\" :key=\"index\">\r\n\t\t\t\t\t\t\t<!-- 确保所有数据访问前都做了检查 -->\r\n\t\t\t\t\t\t\t<CommentStats\r\n\t\t\t\t\t\t\t\tv-if=\"comments && hasComments(index)\"\r\n\t\t\t\t\t\t\t\t:comments=\"getCommentsForSentence(index)\"\r\n\t\t\t\t\t\t\t\t:show-emotion=\"false\"\r\n\t\t\t\t\t\t\t\tclass=\"before-stats\" />\r\n\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tclass=\"sentence\"\r\n\t\t\t\t\t\t\t\t:id=\"'sentence-' + index\"\r\n\t\t\t\t\t\t\t\t:class=\"getSentenceClasses(index)\"\r\n\t\t\t\t\t\t\t\t@mouseenter=\"highlightComments(index)\"\r\n\t\t\t\t\t\t\t\t@mouseleave=\"unhighlightComments\">\r\n\t\t\t\t\t\t\t\t{{ sentence }}\r\n\t\t\t\t\t\t\t\t<sup v-if=\"hasComments(index)\" class=\"annotation-marker\">\r\n\t\t\t\t\t\t\t\t\t{{ getCommentsForSentence(index).length }}\r\n\t\t\t\t\t\t\t\t</sup>\r\n\t\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t\t<CommentStats\r\n\t\t\t\t\t\t\t\tv-if=\"comments && hasComments(index)\"\r\n\t\t\t\t\t\t\t\t:comments=\"getCommentsForSentence(index)\"\r\n\t\t\t\t\t\t\t\t:show-standpoint=\"false\"\r\n\t\t\t\t\t\t\t\t:show-type=\"true\"\r\n\t\t\t\t\t\t\t\tclass=\"after-stats\" />\r\n\r\n\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\tv-if=\"showInlineComments && showTopCommentInline(index)\"\r\n\t\t\t\t\t\t\t\tclass=\"inline-comment\"\r\n\t\t\t\t\t\t\t\t:class=\"`comment-type-${getCommentType(getTopComment(index))}`\">\r\n\t\t\t\t\t\t\t\t【{{ getCommentTypeLabel(getTopComment(index)) }}：{{\r\n\t\t\t\t\t\t\t\t\tformatCommentContent(getTopComment(index).content)\r\n\t\t\t\t\t\t\t\t}}】\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</template>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 第三栏：句子相关评论 -->\r\n\t\t\t<div\r\n\t\t\t\tclass=\"panel annotation-panel\"\r\n\t\t\t\tv-if=\"activeSentence !== null && hasComments(activeSentence)\">\r\n\t\t\t\t<!-- 相关评论内容 -->\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, computed, watch, nextTick } from \"vue\";\r\n\timport api from \"@/api\";\r\n\timport CommentStats from \"./CommentStats.vue\";\r\n\r\n\t// 初始化所有数据为null或空数组\r\n\tconst article = ref(null);\r\n\tconst sentences = ref([]);\r\n\tconst comments = ref([]);\r\n\tconst activeSentence = ref(null);\r\n\r\n\t// 添加数据加载状态\r\n\tconst isLoading = ref(true);\r\n\r\n\t// 计算属性添加空值检查\r\n\tconst globalComments = computed(() => {\r\n\t\treturn comments.value?.filter(comment => comment.link === -1) || [];\r\n\t});\r\n\r\n\t// 方法中添加空值检查\r\n\tconst getCommentsForSentence = index => {\r\n\t\treturn comments.value?.filter(comment => comment.link === index) || [];\r\n\t};\r\n\r\n\tconst hasComments = index => {\r\n\t\tconst sentenceComments = getCommentsForSentence(index);\r\n\t\treturn sentenceComments?.length > 0;\r\n\t};\r\n\r\n\tconst getTopComment = index => {\r\n\t\tconst sentenceComments = getCommentsForSentence(index);\r\n\t\tif (!sentenceComments?.length) return null;\r\n\t\treturn [...sentenceComments].sort((a, b) => b.like_count - a.like_count)[0];\r\n\t};\r\n\r\n\tconst getSentenceClasses = index => {\r\n\t\tconst classes = {\r\n\t\t\t\"has-comment\": hasComments(index),\r\n\t\t\tactive: activeSentence.value === index\r\n\t\t};\r\n\r\n\t\tif (hasComments(index)) {\r\n\t\t\tconst topComment = getTopComment(index);\r\n\t\t\tif (topComment) {\r\n\t\t\t\tclasses[`comment-level-${getCommentLevel(index).level}`] = true;\r\n\t\t\t\tclasses[`comment-type-${getCommentType(topComment)}`] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn classes;\r\n\t};\r\n\r\n\t// 其他方法保持不变...\r\n\r\n\tonMounted(async () => {\r\n\t\ttry {\r\n\t\t\tisLoading.value = true;\r\n\r\n\t\t\t// 使用Promise.all并行加载数据\r\n\t\t\tconst [articleData, commentsData] = await Promise.all([\r\n\t\t\t\tapi.get(\"article\"),\r\n\t\t\t\tapi.get(\"comments\")\r\n\t\t\t]);\r\n\r\n\t\t\tarticle.value = articleData[0] || null;\r\n\t\t\tsentences.value = splitIntoSentences(article.value?.content_text || \"\");\r\n\t\t\tcomments.value = commentsData || [];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"加载数据失败:\", error);\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t/* 原有样式保持不变 */\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}