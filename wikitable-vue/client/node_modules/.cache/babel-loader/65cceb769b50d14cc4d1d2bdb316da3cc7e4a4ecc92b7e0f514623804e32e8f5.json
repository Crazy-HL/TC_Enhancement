{"ast":null,"code":"import { ref, onMounted, computed } from \"vue\";\nimport api from \"@/api\";\nimport CommentCard from \"@/components/CommentCard.vue\";\nexport default {\n  __name: 'ArticleContent',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const article = ref(null);\n    const articleContent = ref(null);\n    const comments = ref([]);\n\n    // 模拟API获取评论数据\n    onMounted(() => {\n      api.get(\"article\", {}, data => {\n        article.value = data[0];\n\n        // 获取评论数据\n        api.get(\"comments\", {}, data => {\n          comments.value = data;\n\n          // 等待DOM更新后处理评论定位\n          setTimeout(() => {\n            positionComments();\n          }, 100);\n        });\n      });\n    });\n\n    // 将评论分配到左右两侧\n    const leftComments = computed(() => comments.value.filter((_, index) => index % 2 === 0));\n    const rightComments = computed(() => comments.value.filter((_, index) => index % 2 !== 0));\n\n    // 定位评论到相关段落\n    const positionComments = () => {\n      if (!articleContent.value) return;\n\n      // 获取所有段落\n      const paragraphs = articleContent.value.querySelectorAll(\"p\");\n      comments.value.forEach(comment => {\n        if (comment.target_paragraph) {\n          // 这里需要根据你的评论数据中存储的目标段落信息来定位\n          // 例如comment.target_paragraph可能是段落索引或ID\n          const targetPara = paragraphs[comment.target_paragraph];\n          if (targetPara) {\n            // 在实际应用中，这里会设置评论卡片的位置\n            // 可能需要使用MutationObserver来响应内容变化\n          }\n        }\n      });\n    };\n\n    // 高亮相关文本\n    const highlightText = targetText => {\n      if (!articleContent.value) return;\n\n      // 清除之前的高亮\n      const existingHighlights = articleContent.value.querySelectorAll(\".highlighted-text\");\n      existingHighlights.forEach(el => {\n        el.classList.remove(\"highlighted-text\");\n      });\n\n      // 高亮匹配的文本\n      const content = articleContent.value.innerHTML;\n      const highlightedContent = content.replace(new RegExp(targetText, \"g\"), `<span class=\"highlighted-text\">${targetText}</span>`);\n      articleContent.value.innerHTML = highlightedContent;\n    };\n    const formatTime = time => {\n      if (!time) return \"\";\n      const date = new Date(time * 1000);\n      return date.toLocaleString();\n    };\n    const __returned__ = {\n      article,\n      articleContent,\n      comments,\n      leftComments,\n      rightComments,\n      positionComments,\n      highlightText,\n      formatTime,\n      ref,\n      onMounted,\n      computed,\n      get api() {\n        return api;\n      },\n      CommentCard\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","api","CommentCard","article","articleContent","comments","get","data","value","setTimeout","positionComments","leftComments","filter","_","index","rightComments","paragraphs","querySelectorAll","forEach","comment","target_paragraph","targetPara","highlightText","targetText","existingHighlights","el","classList","remove","content","innerHTML","highlightedContent","replace","RegExp","formatTime","time","date","Date","toLocaleString"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/ArticleContent.vue"],"sourcesContent":["<template>\r\n\t<div class=\"article-container\" v-if=\"article\">\r\n\t\t<h1 class=\"article-title\">{{ article.title }}</h1>\r\n\r\n\t\t<div class=\"article-meta\">\r\n\t\t\t<span class=\"author\">作者: {{ article.user_nickname }}</span>\r\n\t\t\t<span class=\"publish-time\"\r\n\t\t\t\t>发布时间: {{ formatTime(article.created_time) }}</span\r\n\t\t\t>\r\n\t\t\t<span class=\"update-time\"\r\n\t\t\t\t>更新时间: {{ formatTime(article.updated_time) }}</span\r\n\t\t\t>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"article-content-wrapper\">\r\n\t\t\t<div\r\n\t\t\t\tclass=\"article-content\"\r\n\t\t\t\tref=\"articleContent\"\r\n\t\t\t\tv-html=\"article.content_text\"></div>\r\n\r\n\t\t\t<!-- 左侧评论卡片容器 -->\r\n\t\t\t<div class=\"comment-sidebar left-sidebar\">\r\n\t\t\t\t<CommentCard\r\n\t\t\t\t\tv-for=\"comment in leftComments\"\r\n\t\t\t\t\t:key=\"comment.comment_id\"\r\n\t\t\t\t\t:comment=\"comment\"\r\n\t\t\t\t\t:position=\"'left'\"\r\n\t\t\t\t\t@highlight=\"highlightText\" />\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- 右侧评论卡片容器 -->\r\n\t\t\t<div class=\"comment-sidebar right-sidebar\">\r\n\t\t\t\t<CommentCard\r\n\t\t\t\t\tv-for=\"comment in rightComments\"\r\n\t\t\t\t\t:key=\"comment.comment_id\"\r\n\t\t\t\t\t:comment=\"comment\"\r\n\t\t\t\t\t:position=\"'right'\"\r\n\t\t\t\t\t@highlight=\"highlightText\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"article-footer\">\r\n\t\t\t<div class=\"stats\">\r\n\t\t\t\t<span class=\"vote-count\">点赞: {{ article.voteup_count }}</span>\r\n\t\t\t\t<span class=\"comment-count\">评论: {{ article.comment_count }}</span>\r\n\t\t\t</div>\r\n\t\t\t<a :href=\"article.content_url\" target=\"_blank\" class=\"original-link\"\r\n\t\t\t\t>原文链接</a\r\n\t\t\t>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, computed } from \"vue\";\r\n\timport api from \"@/api\";\r\n\timport CommentCard from \"@/components/CommentCard.vue\";\r\n\r\n\tconst article = ref(null);\r\n\tconst articleContent = ref(null);\r\n\tconst comments = ref([]);\r\n\r\n\t// 模拟API获取评论数据\r\n\tonMounted(() => {\r\n\t\tapi.get(\"article\", {}, data => {\r\n\t\t\tarticle.value = data[0];\r\n\r\n\t\t\t// 获取评论数据\r\n\t\t\tapi.get(\"comments\", {}, data => {\r\n\t\t\t\tcomments.value = data;\r\n\r\n\t\t\t\t// 等待DOM更新后处理评论定位\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tpositionComments();\r\n\t\t\t\t}, 100);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\t// 将评论分配到左右两侧\r\n\tconst leftComments = computed(() =>\r\n\t\tcomments.value.filter((_, index) => index % 2 === 0)\r\n\t);\r\n\tconst rightComments = computed(() =>\r\n\t\tcomments.value.filter((_, index) => index % 2 !== 0)\r\n\t);\r\n\r\n\t// 定位评论到相关段落\r\n\tconst positionComments = () => {\r\n\t\tif (!articleContent.value) return;\r\n\r\n\t\t// 获取所有段落\r\n\t\tconst paragraphs = articleContent.value.querySelectorAll(\"p\");\r\n\r\n\t\tcomments.value.forEach(comment => {\r\n\t\t\tif (comment.target_paragraph) {\r\n\t\t\t\t// 这里需要根据你的评论数据中存储的目标段落信息来定位\r\n\t\t\t\t// 例如comment.target_paragraph可能是段落索引或ID\r\n\t\t\t\tconst targetPara = paragraphs[comment.target_paragraph];\r\n\t\t\t\tif (targetPara) {\r\n\t\t\t\t\t// 在实际应用中，这里会设置评论卡片的位置\r\n\t\t\t\t\t// 可能需要使用MutationObserver来响应内容变化\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t// 高亮相关文本\r\n\tconst highlightText = targetText => {\r\n\t\tif (!articleContent.value) return;\r\n\r\n\t\t// 清除之前的高亮\r\n\t\tconst existingHighlights =\r\n\t\t\tarticleContent.value.querySelectorAll(\".highlighted-text\");\r\n\t\texistingHighlights.forEach(el => {\r\n\t\t\tel.classList.remove(\"highlighted-text\");\r\n\t\t});\r\n\r\n\t\t// 高亮匹配的文本\r\n\t\tconst content = articleContent.value.innerHTML;\r\n\t\tconst highlightedContent = content.replace(\r\n\t\t\tnew RegExp(targetText, \"g\"),\r\n\t\t\t`<span class=\"highlighted-text\">${targetText}</span>`\r\n\t\t);\r\n\t\tarticleContent.value.innerHTML = highlightedContent;\r\n\t};\r\n\r\n\tconst formatTime = time => {\r\n\t\tif (!time) return \"\";\r\n\t\tconst date = new Date(time * 1000);\r\n\t\treturn date.toLocaleString();\r\n\t};\r\n</script>\r\n\r\n<style scoped>\r\n\t.article-container {\r\n\t\tmax-width: 1200px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground: #fff;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.article-content-wrapper {\r\n\t\tdisplay: flex;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.article-content {\r\n\t\tflex: 1;\r\n\t\tfont-size: 16px;\r\n\t\tline-height: 1.8;\r\n\t\tcolor: #333;\r\n\t\tmargin-bottom: 20px;\r\n\t\tpadding: 0 20px;\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.comment-sidebar {\r\n\t\twidth: 200px;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t}\r\n\r\n\t.left-sidebar {\r\n\t\tleft: 0;\r\n\t}\r\n\r\n\t.right-sidebar {\r\n\t\tright: 0;\r\n\t}\r\n\r\n\t.article-title {\r\n\t\tfont-size: 24px;\r\n\t\tmargin-bottom: 15px;\r\n\t\tcolor: #333;\r\n\t\tline-height: 1.4;\r\n\t}\r\n\r\n\t.article-meta {\r\n\t\tmargin-bottom: 20px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.article-meta span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.article-footer {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.stats span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.original-link {\r\n\t\tcolor: #0084ff;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\t.original-link:hover {\r\n\t\ttext-decoration: underline;\r\n\t}\r\n</style>\r\n\r\n<style>\r\n\t.highlighted-text {\r\n\t\tbackground-color: #fff8c5;\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.highlighted-text::after {\r\n\t\tcontent: \"\";\r\n\t\tposition: absolute;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\tbottom: -2px;\r\n\t\theight: 2px;\r\n\t\tbackground-color: #ffd700;\r\n\t}\r\n</style>\r\n"],"mappings":"AAsDC,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,WAAW,MAAM,8BAA8B;;;;;;;;IAEtD,MAAMC,OAAO,GAAGL,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMM,cAAc,GAAGN,GAAG,CAAC,IAAI,CAAC;IAChC,MAAMO,QAAQ,GAAGP,GAAG,CAAC,EAAE,CAAC;;IAExB;IACAC,SAAS,CAAC,MAAM;MACfE,GAAG,CAACK,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EAAEC,IAAI,IAAI;QAC9BJ,OAAO,CAACK,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;;QAEvB;QACAN,GAAG,CAACK,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,EAAEC,IAAI,IAAI;UAC/BF,QAAQ,CAACG,KAAK,GAAGD,IAAI;;UAErB;UACAE,UAAU,CAAC,MAAM;YAChBC,gBAAgB,CAAC,CAAC;UACnB,CAAC,EAAE,GAAG,CAAC;QACR,CAAC,CAAC;MACH,CAAC,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAMC,YAAY,GAAGX,QAAQ,CAAC,MAC7BK,QAAQ,CAACG,KAAK,CAACI,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,KAAK,CAAC,CACpD,CAAC;IACD,MAAMC,aAAa,GAAGf,QAAQ,CAAC,MAC9BK,QAAQ,CAACG,KAAK,CAACI,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,KAAK,CAAC,CACpD,CAAC;;IAED;IACA,MAAMJ,gBAAgB,GAAGA,CAAA,KAAM;MAC9B,IAAI,CAACN,cAAc,CAACI,KAAK,EAAE;;MAE3B;MACA,MAAMQ,UAAU,GAAGZ,cAAc,CAACI,KAAK,CAACS,gBAAgB,CAAC,GAAG,CAAC;MAE7DZ,QAAQ,CAACG,KAAK,CAACU,OAAO,CAACC,OAAO,IAAI;QACjC,IAAIA,OAAO,CAACC,gBAAgB,EAAE;UAC7B;UACA;UACA,MAAMC,UAAU,GAAGL,UAAU,CAACG,OAAO,CAACC,gBAAgB,CAAC;UACvD,IAAIC,UAAU,EAAE;YACf;YACA;UAAA;QAEF;MACD,CAAC,CAAC;IACH,CAAC;;IAED;IACA,MAAMC,aAAa,GAAGC,UAAU,IAAI;MACnC,IAAI,CAACnB,cAAc,CAACI,KAAK,EAAE;;MAE3B;MACA,MAAMgB,kBAAkB,GACvBpB,cAAc,CAACI,KAAK,CAACS,gBAAgB,CAAC,mBAAmB,CAAC;MAC3DO,kBAAkB,CAACN,OAAO,CAACO,EAAE,IAAI;QAChCA,EAAE,CAACC,SAAS,CAACC,MAAM,CAAC,kBAAkB,CAAC;MACxC,CAAC,CAAC;;MAEF;MACA,MAAMC,OAAO,GAAGxB,cAAc,CAACI,KAAK,CAACqB,SAAS;MAC9C,MAAMC,kBAAkB,GAAGF,OAAO,CAACG,OAAO,CACzC,IAAIC,MAAM,CAACT,UAAU,EAAE,GAAG,CAAC,EAC3B,kCAAkCA,UAAU,SAC7C,CAAC;MACDnB,cAAc,CAACI,KAAK,CAACqB,SAAS,GAAGC,kBAAkB;IACpD,CAAC;IAED,MAAMG,UAAU,GAAGC,IAAI,IAAI;MAC1B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,IAAI,GAAG,IAAI,CAAC;MAClC,OAAOC,IAAI,CAACE,cAAc,CAAC,CAAC;IAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}