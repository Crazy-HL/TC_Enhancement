{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-ec3c90c2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"word-container\"\n};\nconst _hoisted_2 = [\"title\", \"onClick\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"normal-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"span\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.segmentedText, (segment, index) => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: index\n    }, [segment.isWord && $setup.isHighlighted(segment.text) ? (_openBlock(), _createElementBlock(\"span\", {\n      key: 0,\n      class: \"frequency-word\",\n      style: _normalizeStyle($setup.getWordStyle(segment.text)),\n      title: `在相关评论中出现 ${$setup.wordFrequency[segment.text] || 0} 次`,\n      onClick: $event => $setup.handleWordClick(segment.text)\n    }, _toDisplayString(segment.text), 13 /* TEXT, STYLE, PROPS */, _hoisted_2)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_3, _toDisplayString(segment.text), 1 /* TEXT */))], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_Fragment","_renderList","$setup","segmentedText","segment","index","isWord","isHighlighted","text","style","_normalizeStyle","getWordStyle","title","wordFrequency","onClick","$event","handleWordClick","_hoisted_2","_hoisted_3","_toDisplayString"],"sources":["D:\\ZhiHu\\zhihu-bullet\\wikitable-vue\\client\\src\\components\\HighFrequencyWords.vue"],"sourcesContent":["<template>\r\n\t<span class=\"word-container\">\r\n\t\t<template v-for=\"(segment, index) in segmentedText\" :key=\"index\">\r\n\t\t\t<span\r\n\t\t\t\tv-if=\"segment.isWord && isHighlighted(segment.text)\"\r\n\t\t\t\tclass=\"frequency-word\"\r\n\t\t\t\t:style=\"getWordStyle(segment.text)\"\r\n\t\t\t\t:title=\"`在相关评论中出现 ${wordFrequency[segment.text] || 0} 次`\"\r\n\t\t\t\t@click=\"handleWordClick(segment.text)\">\r\n\t\t\t\t{{ segment.text }}\r\n\t\t\t</span>\r\n\t\t\t<span v-else class=\"normal-text\">\r\n\t\t\t\t{{ segment.text }}\r\n\t\t\t</span>\r\n\t\t</template>\r\n\t</span>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\timport api from \"@/api\";\r\n\r\n\tconst props = defineProps({\r\n\t\tsentence: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tsentenceIndex: {\r\n\t\t\ttype: Number,\r\n\t\t\trequired: true\r\n\t\t},\r\n\t\tcomments: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => []\r\n\t\t},\r\n\t\tactive: {\r\n\t\t\ttype: Boolean,\r\n\t\t\tdefault: false\r\n\t\t},\r\n\t\tminFrequency: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3\r\n\t\t},\r\n\t\tmaxFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1.5\r\n\t\t},\r\n\t\tminFontSize: {\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 1\r\n\t\t},\r\n\t\tcolorRange: {\r\n\t\t\ttype: Array,\r\n\t\t\tdefault: () => [\"#FFD700\", \"#FF6347\"]\r\n\t\t}\r\n\t});\r\n\r\n\tconst emit = defineEmits([\"word-click\"]);\r\n\r\n\t// Reactive data\r\n\tconst wordFrequency = ref({});\r\n\tconst segmentedText = ref([]);\r\n\tconst isLoading = ref(false);\r\n\r\n\t// Computed properties\r\n\tconst highFrequencyWords = computed(() => {\r\n\t\treturn Object.entries(wordFrequency.value)\r\n\t\t\t.filter(([_, count]) => count >= props.minFrequency)\r\n\t\t\t.map(([word]) => word);\r\n\t});\r\n\r\n\t// Methods\r\n\tconst isHighlighted = word => {\r\n\t\treturn props.active && highFrequencyWords.value.includes(word);\r\n\t};\r\n\r\n\tconst getWordStyle = word => {\r\n\t\tconst count = wordFrequency.value[word] || 0;\r\n\t\tconst maxCount = Math.max(\r\n\t\t\t...Object.values(wordFrequency.value),\r\n\t\t\tprops.minFrequency\r\n\t\t);\r\n\t\tconst ratio = Math.min(count / maxCount, 1);\r\n\r\n\t\t// Font size calculation\r\n\t\tconst fontSize =\r\n\t\t\tprops.minFontSize + (props.maxFontSize - props.minFontSize) * ratio;\r\n\r\n\t\t// Color interpolation\r\n\t\tconst color = interpolateColor(\r\n\t\t\tprops.colorRange[0],\r\n\t\t\tprops.colorRange[1],\r\n\t\t\tratio\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tfontSize: `${fontSize}em`,\r\n\t\t\tcolor: color,\r\n\t\t\tfontWeight: 400 + Math.round(ratio * 300),\r\n\t\t\ttextShadow: `0 0 ${ratio * 3}px rgba(255, 99, 71, ${ratio * 0.3})`,\r\n\t\t\tbackgroundColor: `hsla(30, 80%, 80%, ${ratio * 0.2})`,\r\n\t\t\tpadding: \"0 2px\",\r\n\t\t\tborderRadius: \"3px\",\r\n\t\t\ttransition: \"all 0.2s ease\",\r\n\t\t\tdisplay: \"inline-block\",\r\n\t\t\tlineHeight: \"1.2\"\r\n\t\t};\r\n\t};\r\n\r\n\tconst interpolateColor = (color1, color2, factor) => {\r\n\t\tconst hex = color => color.replace(\"#\", \"\");\r\n\t\tconst h2r = hex => parseInt(hex, 16);\r\n\t\tconst r2h = num => Math.round(num).toString(16).padStart(2, \"0\");\r\n\r\n\t\tconst c1 = hex(color1);\r\n\t\tconst c2 = hex(color2);\r\n\r\n\t\tconst r1 = h2r(c1.substring(0, 2));\r\n\t\tconst g1 = h2r(c1.substring(2, 4));\r\n\t\tconst b1 = h2r(c1.substring(4, 6));\r\n\r\n\t\tconst r2 = h2r(c2.substring(0, 2));\r\n\t\tconst g2 = h2r(c2.substring(2, 4));\r\n\t\tconst b2 = h2r(c2.substring(4, 6));\r\n\r\n\t\tconst r = r1 + (r2 - r1) * factor;\r\n\t\tconst g = g1 + (g2 - g1) * factor;\r\n\t\tconst b = b1 + (b2 - b1) * factor;\r\n\r\n\t\treturn `#${r2h(r)}${r2h(g)}${r2h(b)}`;\r\n\t};\r\n\r\n\tconst segmentText = text => {\r\n\t\t// Improved segmentation for Chinese text\r\n\t\tconst regex = /([\\u4e00-\\u9fa5]{1,4}|[a-zA-Z]+|\\p{P}|\\s)/gu;\r\n\t\tconst segments = [];\r\n\t\tlet match;\r\n\r\n\t\twhile ((match = regex.exec(text)) !== null) {\r\n\t\t\tconst token = match[0];\r\n\t\t\tsegments.push({\r\n\t\t\t\ttext: token,\r\n\t\t\t\tisWord: /[\\u4e00-\\u9fa5]{2,}|[a-zA-Z]{3,}/.test(token)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn segments;\r\n\t};\r\n\r\n\tconst fetchWordFrequency = async () => {\r\n\t\tif (!props.active || isLoading.value) return;\r\n\r\n\t\tisLoading.value = true;\r\n\t\ttry {\r\n\t\t\tconst response = await api.post(\"word_frequency\", {\r\n\t\t\t\tsentence_index: props.sentenceIndex,\r\n\t\t\t\tcomments: props.comments\r\n\t\t\t});\r\n\r\n\t\t\tif (response.status === \"success\") {\r\n\t\t\t\twordFrequency.value = response.data.word_frequency || {};\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Failed to fetch word frequency:\", error);\r\n\t\t} finally {\r\n\t\t\tisLoading.value = false;\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleWordClick = word => {\r\n\t\temit(\"word-click\", {\r\n\t\t\tword,\r\n\t\t\tfrequency: wordFrequency.value[word] || 0\r\n\t\t});\r\n\t};\r\n\r\n\t// Lifecycle hooks\r\n\tonMounted(() => {\r\n\t\tsegmentedText.value = segmentText(props.sentence);\r\n\t\tif (props.active) {\r\n\t\t\tfetchWordFrequency();\r\n\t\t}\r\n\t});\r\n\r\n\t// Watchers\r\n\twatch(\r\n\t\t() => props.sentence,\r\n\t\tnewVal => {\r\n\t\t\tsegmentedText.value = segmentText(newVal);\r\n\t\t},\r\n\t\t{ immediate: true }\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.active,\r\n\t\tnewVal => {\r\n\t\t\tif (newVal) {\r\n\t\t\t\tfetchWordFrequency();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\twatch(\r\n\t\t() => props.comments,\r\n\t\t() => {\r\n\t\t\tif (props.active) {\r\n\t\t\t\tfetchWordFrequency();\r\n\t\t\t}\r\n\t\t},\r\n\t\t{ deep: true }\r\n\t);\r\n</script>\r\n\r\n<style scoped>\r\n\t.word-container {\r\n\t\tdisplay: inline;\r\n\t\tline-height: 1.6;\r\n\t}\r\n\r\n\t.frequency-word {\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: all 0.2s ease;\r\n\t}\r\n\r\n\t.frequency-word:hover {\r\n\t\ttransform: translateY(-2px);\r\n\t\tz-index: 2;\r\n\t\tbox-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\r\n\t}\r\n\r\n\t.normal-text {\r\n\t\tdisplay: inline;\r\n\t}\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAgB;mBAD7B;;EAAAC,GAAA;EAWgBD,KAAK,EAAC;;;uBAVrBE,mBAAA,CAcO,QAdPC,UAcO,I,kBAbND,mBAAA,CAYWE,SAAA,QAdbC,WAAA,CAEuCC,MAAA,CAAAC,aAAa,EAFpD,CAEoBC,OAAO,EAAEC,KAAK;yBAFlCP,mBAAA,CAAAE,SAAA;MAAAH,GAAA,EAE4DQ;IAAK,IAEvDD,OAAO,CAACE,MAAM,IAAIJ,MAAA,CAAAK,aAAa,CAACH,OAAO,CAACI,IAAI,K,cADnDV,mBAAA,CAOO;MAVVD,GAAA;MAKID,KAAK,EAAC,gBAAgB;MACrBa,KAAK,EANVC,eAAA,CAMYR,MAAA,CAAAS,YAAY,CAACP,OAAO,CAACI,IAAI;MAChCI,KAAK,cAAcV,MAAA,CAAAW,aAAa,CAACT,OAAO,CAACI,IAAI;MAC7CM,OAAK,EAAAC,MAAA,IAAEb,MAAA,CAAAc,eAAe,CAACZ,OAAO,CAACI,IAAI;wBACjCJ,OAAO,CAACI,IAAI,gCATnBS,UAAA,M,cAWGnB,mBAAA,CAEO,QAFPoB,UAEO,EAAAC,gBAAA,CADHf,OAAO,CAACI,IAAI,kB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}