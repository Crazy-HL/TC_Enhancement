{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from \"vue\";\nimport api from \"@/api\";\nimport DanmuDisplay from \"@/components/DanmuDisplay.vue\";\nexport default {\n  __name: 'ArticleContent',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const article = ref({});\n    const sentences = ref([]);\n    const comments = ref([]);\n    const activeSentence = ref(null);\n    const articleContainer = ref(null);\n\n    // 获取文章数据\n    const fetchArticleData = async () => {\n      const [articleRes, commentsRes] = await Promise.all([api.get(\"article\", {}), api.get(\"comments\", {})]);\n      article.value = articleRes[0];\n      comments.value = commentsRes;\n      sentences.value = splitIntoSentences(article.value.content_text);\n    };\n\n    // 句子分割逻辑\n    const splitIntoSentences = text => {\n      if (!text) return [];\n      const regex = /([^。！？.!?]+[。！？.!?]+)/g;\n      const result = [];\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const sentence = match[0].trim();\n        if (sentence.length > 0) result.push(sentence);\n      }\n      return result.length > 0 ? result : [text];\n    };\n\n    // 格式化时间\n    const formatTime = time => {\n      if (!time) return \"\";\n      return new Date(time * 1000).toLocaleString();\n    };\n    onMounted(() => {\n      fetchArticleData();\n    });\n    const __returned__ = {\n      article,\n      sentences,\n      comments,\n      activeSentence,\n      articleContainer,\n      fetchArticleData,\n      splitIntoSentences,\n      formatTime,\n      ref,\n      onMounted,\n      get api() {\n        return api;\n      },\n      DanmuDisplay\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","api","DanmuDisplay","article","sentences","comments","activeSentence","articleContainer","fetchArticleData","articleRes","commentsRes","Promise","all","get","value","splitIntoSentences","content_text","text","regex","result","match","exec","sentence","trim","length","push","formatTime","time","Date","toLocaleString"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/ArticleContent.vue"],"sourcesContent":["<template>\r\n\t<div class=\"article-container\" ref=\"articleContainer\">\r\n\t\t<!-- 弹幕组件 -->\r\n\t\t<DanmuDisplay :active-sentence=\"activeSentence\" :comments=\"comments\" />\r\n\r\n\t\t<h1 class=\"article-title\">{{ article.title }}</h1>\r\n\r\n\t\t<div class=\"article-meta\">\r\n\t\t\t<span class=\"author\">作者: {{ article.user_nickname }}</span>\r\n\t\t\t<span class=\"publish-time\"\r\n\t\t\t\t>发布时间: {{ formatTime(article.created_time) }}</span\r\n\t\t\t>\r\n\t\t\t<span class=\"update-time\"\r\n\t\t\t\t>更新时间: {{ formatTime(article.updated_time) }}</span\r\n\t\t\t>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"article-content\">\r\n\t\t\t<span\r\n\t\t\t\tv-for=\"(sentence, index) in sentences\"\r\n\t\t\t\t:key=\"index\"\r\n\t\t\t\tclass=\"sentence\"\r\n\t\t\t\t:class=\"{ 'sentence-active': activeSentence === index }\"\r\n\t\t\t\t@mouseenter=\"activeSentence = index\"\r\n\t\t\t\t@mouseleave=\"activeSentence = null\">\r\n\t\t\t\t{{ sentence }}\r\n\t\t\t</span>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"article-footer\">\r\n\t\t\t<div class=\"stats\">\r\n\t\t\t\t<span class=\"vote-count\">点赞: {{ article.voteup_count }}</span>\r\n\t\t\t\t<span class=\"comment-count\">评论: {{ article.comment_count }}</span>\r\n\t\t\t</div>\r\n\t\t\t<a :href=\"article.content_url\" target=\"_blank\" class=\"original-link\"\r\n\t\t\t\t>原文链接</a\r\n\t\t\t>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted } from \"vue\";\r\n\timport api from \"@/api\";\r\n\timport DanmuDisplay from \"@/components/DanmuDisplay.vue\";\r\n\r\n\tconst article = ref({});\r\n\tconst sentences = ref([]);\r\n\tconst comments = ref([]);\r\n\tconst activeSentence = ref(null);\r\n\tconst articleContainer = ref(null);\r\n\r\n\t// 获取文章数据\r\n\tconst fetchArticleData = async () => {\r\n\t\tconst [articleRes, commentsRes] = await Promise.all([\r\n\t\t\tapi.get(\"article\", {}),\r\n\t\t\tapi.get(\"comments\", {})\r\n\t\t]);\r\n\r\n\t\tarticle.value = articleRes[0];\r\n\t\tcomments.value = commentsRes;\r\n\t\tsentences.value = splitIntoSentences(article.value.content_text);\r\n\t};\r\n\r\n\t// 句子分割逻辑\r\n\tconst splitIntoSentences = text => {\r\n\t\tif (!text) return [];\r\n\t\tconst regex = /([^。！？.!?]+[。！？.!?]+)/g;\r\n\t\tconst result = [];\r\n\t\tlet match;\r\n\r\n\t\twhile ((match = regex.exec(text)) !== null) {\r\n\t\t\tconst sentence = match[0].trim();\r\n\t\t\tif (sentence.length > 0) result.push(sentence);\r\n\t\t}\r\n\t\treturn result.length > 0 ? result : [text];\r\n\t};\r\n\r\n\t// 格式化时间\r\n\tconst formatTime = time => {\r\n\t\tif (!time) return \"\";\r\n\t\treturn new Date(time * 1000).toLocaleString();\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tfetchArticleData();\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.article-container {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground: #fff;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.article-title {\r\n\t\tfont-size: 24px;\r\n\t\tmargin-bottom: 15px;\r\n\t\tcolor: #333;\r\n\t\tline-height: 1.4;\r\n\t\tpadding-top: 100px; /* 为弹幕留出空间 */\r\n\t}\r\n\r\n\t.article-meta {\r\n\t\tmargin-bottom: 20px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.article-meta span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.article-content {\r\n\t\tfont-size: 16px;\r\n\t\tline-height: 1.8;\r\n\t\tcolor: #333;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t.sentence {\r\n\t\tdisplay: inline;\r\n\t\tmargin-right: 0.2em;\r\n\t\tposition: relative;\r\n\t\tcursor: pointer;\r\n\t\ttransition: background-color 0.2s;\r\n\t}\r\n\r\n\t.sentence:hover,\r\n\t.sentence-active {\r\n\t\tbackground-color: #f0f7ff;\r\n\t}\r\n\r\n\t.article-footer {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.stats span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.original-link {\r\n\t\tcolor: #0084ff;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\t.original-link:hover {\r\n\t\ttext-decoration: underline;\r\n\t}\r\n</style>\r\n"],"mappings":";AA0CC,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,YAAY,MAAM,+BAA+B;;;;;;;;IAExD,MAAMC,OAAO,GAAGJ,GAAG,CAAC,CAAC,CAAC,CAAC;IACvB,MAAMK,SAAS,GAAGL,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMM,QAAQ,GAAGN,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMO,cAAc,GAAGP,GAAG,CAAC,IAAI,CAAC;IAChC,MAAMQ,gBAAgB,GAAGR,GAAG,CAAC,IAAI,CAAC;;IAElC;IACA,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACpC,MAAM,CAACC,UAAU,EAAEC,WAAW,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACnDX,GAAG,CAACY,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EACtBZ,GAAG,CAACY,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CACvB,CAAC;MAEFV,OAAO,CAACW,KAAK,GAAGL,UAAU,CAAC,CAAC,CAAC;MAC7BJ,QAAQ,CAACS,KAAK,GAAGJ,WAAW;MAC5BN,SAAS,CAACU,KAAK,GAAGC,kBAAkB,CAACZ,OAAO,CAACW,KAAK,CAACE,YAAY,CAAC;IACjE,CAAC;;IAED;IACA,MAAMD,kBAAkB,GAAGE,IAAI,IAAI;MAClC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,MAAMC,KAAK,GAAG,wBAAwB;MACtC,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAIC,KAAK;MAET,OAAO,CAACA,KAAK,GAAGF,KAAK,CAACG,IAAI,CAACJ,IAAI,CAAC,MAAM,IAAI,EAAE;QAC3C,MAAMK,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;QAChC,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAEL,MAAM,CAACM,IAAI,CAACH,QAAQ,CAAC;MAC/C;MACA,OAAOH,MAAM,CAACK,MAAM,GAAG,CAAC,GAAGL,MAAM,GAAG,CAACF,IAAI,CAAC;IAC3C,CAAC;;IAED;IACA,MAAMS,UAAU,GAAGC,IAAI,IAAI;MAC1B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,OAAO,IAAIC,IAAI,CAACD,IAAI,GAAG,IAAI,CAAC,CAACE,cAAc,CAAC,CAAC;IAC9C,CAAC;IAED7B,SAAS,CAAC,MAAM;MACfQ,gBAAgB,CAAC,CAAC;IACnB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}