{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from \"vue\";\nimport api from \"@/api\";\nexport default {\n  __name: 'ArticleContent',\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    const article = ref(null);\n    const sentences = ref([]);\n\n    // 格式化时间\n    const formatTime = time => {\n      if (!time) return \"\";\n      const date = new Date(time * 1000);\n      return date.toLocaleString();\n    };\n\n    // 分割句子的函数\n    const splitIntoSentences = text => {\n      if (!text) return [];\n\n      // 处理中文句子分割（。！？）\n      // 同时保留英文句子分割（.!?）\n      const regex = /([^。！？.!?]+[。！？.!?]+)/g;\n      const result = [];\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        const sentence = match[0].trim();\n        if (sentence.length > 0) {\n          result.push(sentence);\n        }\n      }\n\n      // 如果没有匹配到任何句子，返回整个文本作为单个句子\n      return result.length > 0 ? result : [text];\n    };\n    onMounted(() => {\n      api.get(\"article\", {}, data => {\n        article.value = data[0];\n        console.log(\"原始内容:\", data[0].content_text);\n\n        // 分割句子\n        sentences.value = splitIntoSentences(data[0].content_text);\n        console.log(\"分割后的句子数组:\", sentences.value);\n      });\n    });\n    const __returned__ = {\n      article,\n      sentences,\n      formatTime,\n      splitIntoSentences,\n      ref,\n      onMounted,\n      computed,\n      get api() {\n        return api;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","api","article","sentences","formatTime","time","date","Date","toLocaleString","splitIntoSentences","text","regex","result","match","exec","sentence","trim","length","push","get","data","value","console","log","content_text"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/ArticleContent.vue"],"sourcesContent":["<template>\r\n\t<div class=\"article-container\" v-if=\"article\">\r\n\t\t<h1 class=\"article-title\">{{ article.title }}</h1>\r\n\r\n\t\t<div class=\"article-meta\">\r\n\t\t\t<span class=\"author\">作者: {{ article.user_nickname }}</span>\r\n\t\t\t<span class=\"publish-time\"\r\n\t\t\t\t>发布时间: {{ formatTime(article.created_time) }}</span\r\n\t\t\t>\r\n\t\t\t<span class=\"update-time\"\r\n\t\t\t\t>更新时间: {{ formatTime(article.updated_time) }}</span\r\n\t\t\t>\r\n\t\t</div>\r\n\r\n\t\t<!-- 修改后的内容展示，每个句子用span包裹 -->\r\n\t\t<div class=\"article-content\">\r\n\t\t\t<span\r\n\t\t\t\tv-for=\"(sentence, index) in sentences\"\r\n\t\t\t\t:key=\"index\"\r\n\t\t\t\tclass=\"sentence\"\r\n\t\t\t\t:data-sentence-id=\"`sentence-${index}`\">\r\n\t\t\t\t{{ sentence }}\r\n\t\t\t</span>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"article-footer\">\r\n\t\t\t<div class=\"stats\">\r\n\t\t\t\t<span class=\"vote-count\">点赞: {{ article.voteup_count }}</span>\r\n\t\t\t\t<span class=\"comment-count\">评论: {{ article.comment_count }}</span>\r\n\t\t\t</div>\r\n\t\t\t<a :href=\"article.content_url\" target=\"_blank\" class=\"original-link\"\r\n\t\t\t\t>原文链接</a\r\n\t\t\t>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, onMounted, computed } from \"vue\";\r\n\timport api from \"@/api\";\r\n\r\n\tconst article = ref(null);\r\n\tconst sentences = ref([]);\r\n\r\n\t// 格式化时间\r\n\tconst formatTime = time => {\r\n\t\tif (!time) return \"\";\r\n\t\tconst date = new Date(time * 1000);\r\n\t\treturn date.toLocaleString();\r\n\t};\r\n\r\n\t// 分割句子的函数\r\n\tconst splitIntoSentences = text => {\r\n\t\tif (!text) return [];\r\n\r\n\t\t// 处理中文句子分割（。！？）\r\n\t\t// 同时保留英文句子分割（.!?）\r\n\t\tconst regex = /([^。！？.!?]+[。！？.!?]+)/g;\r\n\t\tconst result = [];\r\n\t\tlet match;\r\n\r\n\t\twhile ((match = regex.exec(text)) !== null) {\r\n\t\t\tconst sentence = match[0].trim();\r\n\t\t\tif (sentence.length > 0) {\r\n\t\t\t\tresult.push(sentence);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 如果没有匹配到任何句子，返回整个文本作为单个句子\r\n\t\treturn result.length > 0 ? result : [text];\r\n\t};\r\n\r\n\tonMounted(() => {\r\n\t\tapi.get(\"article\", {}, data => {\r\n\t\t\tarticle.value = data[0];\r\n\t\t\tconsole.log(\"原始内容:\", data[0].content_text);\r\n\r\n\t\t\t// 分割句子\r\n\t\t\tsentences.value = splitIntoSentences(data[0].content_text);\r\n\t\t\tconsole.log(\"分割后的句子数组:\", sentences.value);\r\n\t\t});\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.article-container {\r\n\t\tmax-width: 800px;\r\n\t\tmargin: 0 auto;\r\n\t\tpadding: 20px;\r\n\t\tbackground: #fff;\r\n\t\tborder-radius: 8px;\r\n\t\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n\t}\r\n\r\n\t.article-title {\r\n\t\tfont-size: 24px;\r\n\t\tmargin-bottom: 15px;\r\n\t\tcolor: #333;\r\n\t\tline-height: 1.4;\r\n\t}\r\n\r\n\t.article-meta {\r\n\t\tmargin-bottom: 20px;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.article-meta span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.article-content {\r\n\t\tfont-size: 16px;\r\n\t\tline-height: 1.8;\r\n\t\tcolor: #333;\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n\r\n\t/* 句子样式，可以根据需要调整 */\r\n\t.sentence {\r\n\t\tdisplay: inline;\r\n\t\tmargin-right: 0.2em;\r\n\t}\r\n\r\n\t/* 鼠标悬停时高亮句子 */\r\n\t.sentence:hover {\r\n\t\tbackground-color: #f0f7ff;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t.article-footer {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\t\talign-items: center;\r\n\t\tpadding-top: 15px;\r\n\t\tborder-top: 1px solid #eee;\r\n\t\tfont-size: 14px;\r\n\t\tcolor: #666;\r\n\t}\r\n\r\n\t.stats span {\r\n\t\tmargin-right: 15px;\r\n\t}\r\n\r\n\t.original-link {\r\n\t\tcolor: #0084ff;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\t.original-link:hover {\r\n\t\ttext-decoration: underline;\r\n\t}\r\n</style>\r\n"],"mappings":";AAsCC,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,OAAOC,GAAG,MAAM,OAAO;;;;;;;;IAEvB,MAAMC,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMK,SAAS,GAAGL,GAAG,CAAC,EAAE,CAAC;;IAEzB;IACA,MAAMM,UAAU,GAAGC,IAAI,IAAI;MAC1B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;MACpB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,IAAI,GAAG,IAAI,CAAC;MAClC,OAAOC,IAAI,CAACE,cAAc,CAAC,CAAC;IAC7B,CAAC;;IAED;IACA,MAAMC,kBAAkB,GAAGC,IAAI,IAAI;MAClC,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;;MAEpB;MACA;MACA,MAAMC,KAAK,GAAG,wBAAwB;MACtC,MAAMC,MAAM,GAAG,EAAE;MACjB,IAAIC,KAAK;MAET,OAAO,CAACA,KAAK,GAAGF,KAAK,CAACG,IAAI,CAACJ,IAAI,CAAC,MAAM,IAAI,EAAE;QAC3C,MAAMK,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;QAChC,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;UACxBL,MAAM,CAACM,IAAI,CAACH,QAAQ,CAAC;QACtB;MACD;;MAEA;MACA,OAAOH,MAAM,CAACK,MAAM,GAAG,CAAC,GAAGL,MAAM,GAAG,CAACF,IAAI,CAAC;IAC3C,CAAC;IAEDX,SAAS,CAAC,MAAM;MACfE,GAAG,CAACkB,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EAAEC,IAAI,IAAI;QAC9BlB,OAAO,CAACmB,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;QACvBE,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEH,IAAI,CAAC,CAAC,CAAC,CAACI,YAAY,CAAC;;QAE1C;QACArB,SAAS,CAACkB,KAAK,GAAGZ,kBAAkB,CAACW,IAAI,CAAC,CAAC,CAAC,CAACI,YAAY,CAAC;QAC1DF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEpB,SAAS,CAACkB,KAAK,CAAC;MAC1C,CAAC,CAAC;IACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}