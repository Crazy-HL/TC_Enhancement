{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useCssVars as _useCssVars, unref as _unref } from 'vue';\nimport { ref, computed, watch, onMounted } from \"vue\";\nexport default {\n  __name: 'DanmuDisplay',\n  props: {\n    comments: Array,\n    activeSentence: Number,\n    maxLines: {\n      // 新增：控制最大行数\n      type: Number,\n      default: 3\n    },\n    maxDanmus: {\n      // 新增：控制最大弹幕数量\n      type: Number,\n      default: 5\n    }\n  },\n  setup(__props, _ref) {\n    let {\n      expose: __expose\n    } = _ref;\n    __expose();\n    _useCssVars(_ctx => ({\n      \"69ad0d39-props\\.maxLines\": props.maxLines\n    }));\n    const props = __props;\n    const colorPool = [\"#FF6B6B\", \"#4ECDC4\", \"#45B7D1\", \"#FFA07A\", \"#98D8C8\", \"#F06292\", \"#7986CB\", \"#9575CD\", \"#64B5F6\", \"#4DB6AC\", \"#81C784\", \"#FFD54F\"];\n    const danmuContainer = ref(null);\n    const danmuLines = ref([]); // 记录每行弹幕的结束时间\n    const allDanmus = ref([]);\n\n    // 获取随机颜色\n    const getRandomColor = () => {\n      return colorPool[Math.floor(Math.random() * colorPool.length)];\n    };\n\n    // 获取某句子的相关评论\n    const getCommentsForSentence = sentenceIndex => {\n      return props.comments.filter(comment => comment.link === sentenceIndex);\n    };\n\n    // 计算弹幕速度（根据长度）\n    const calculateSpeed = text => {\n      const baseSpeed = 10;\n      const lengthFactor = Math.min(text.length / 50, 2); // 长度影响系数\n      return baseSpeed + Math.random() * 5 * lengthFactor;\n    };\n\n    // 分配弹幕行（防止重叠）\n    const assignDanmuLine = () => {\n      const now = Date.now();\n      const availableLines = [];\n\n      // 找出可用的行\n      for (let i = 0; i < props.maxLines; i++) {\n        if (!danmuLines.value[i] || danmuLines.value[i] < now) {\n          availableLines.push(i);\n        }\n      }\n      return availableLines.length > 0 ? availableLines[Math.floor(Math.random() * availableLines.length)] : Math.floor(Math.random() * props.maxLines); // 如果都占用则随机选一行\n    };\n\n    // 生成弹幕数据\n    const generateDanmus = () => {\n      if (props.activeSentence === null) return;\n      const relatedComments = getCommentsForSentence(props.activeSentence);\n      if (relatedComments.length === 0) return;\n\n      // 限制弹幕数量\n      const commentsToShow = relatedComments.slice(0, props.maxDanmus);\n      commentsToShow.forEach(comment => {\n        const lineIndex = assignDanmuLine();\n        const speed = calculateSpeed(comment.content);\n\n        // 记录此行将被占用（预计3秒后释放）\n        danmuLines.value[lineIndex] = Date.now() + speed * 1000;\n        allDanmus.value.push({\n          id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          content: comment.content,\n          user: comment.user_nickname,\n          color: getRandomColor(),\n          top: lineIndex * 30 + 10,\n          // 每行间隔30px\n          speed: speed,\n          createTime: Date.now()\n        });\n      });\n    };\n\n    // 清理过期弹幕\n    const cleanExpiredDanmus = () => {\n      const now = Date.now();\n      allDanmus.value = allDanmus.value.filter(danmu => {\n        return now - danmu.createTime < danmu.speed * 1000 * 1.5; // 保留时间比动画时间长50%\n      });\n    };\n\n    // 可见的弹幕（限制数量）\n    const visibleDanmus = computed(() => {\n      cleanExpiredDanmus();\n      return allDanmus.value.slice(-props.maxDanmus * 2); // 保留最近N条\n    });\n\n    // 监听激活的句子变化\n    watch(() => props.activeSentence, newVal => {\n      if (newVal !== null) {\n        generateDanmus();\n      }\n    });\n\n    // 初始化行记录\n    onMounted(() => {\n      danmuLines.value = Array(props.maxLines).fill(0);\n    });\n    const __returned__ = {\n      props,\n      colorPool,\n      danmuContainer,\n      danmuLines,\n      allDanmus,\n      getRandomColor,\n      getCommentsForSentence,\n      calculateSpeed,\n      assignDanmuLine,\n      generateDanmus,\n      cleanExpiredDanmus,\n      visibleDanmus,\n      ref,\n      computed,\n      watch,\n      onMounted\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","watch","onMounted","props","__props","colorPool","danmuContainer","danmuLines","allDanmus","getRandomColor","Math","floor","random","length","getCommentsForSentence","sentenceIndex","comments","filter","comment","link","calculateSpeed","text","baseSpeed","lengthFactor","min","assignDanmuLine","now","Date","availableLines","i","maxLines","value","push","generateDanmus","activeSentence","relatedComments","commentsToShow","slice","maxDanmus","forEach","lineIndex","speed","content","id","toString","substr","user","user_nickname","color","top","createTime","cleanExpiredDanmus","danmu","visibleDanmus","newVal","Array","fill"],"sources":["D:/ZhiHu/zhihu-bullet/wikitable-vue/client/src/components/DanmuDisplay.vue"],"sourcesContent":["<template>\r\n\t<div class=\"danmu-container\" ref=\"danmuContainer\">\r\n\t\t<div\r\n\t\t\tv-for=\"danmu in visibleDanmus\"\r\n\t\t\t:key=\"danmu.id\"\r\n\t\t\tclass=\"danmu-item\"\r\n\t\t\t:style=\"{\r\n\t\t\t\ttop: `${danmu.top}px`,\r\n\t\t\t\t'animation-duration': `${danmu.speed}s`,\r\n\t\t\t\tcolor: danmu.color\r\n\t\t\t}\">\r\n\t\t\t{{ danmu.user }}：{{ danmu.content }}\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script setup>\r\n\timport { ref, computed, watch, onMounted } from \"vue\";\r\n\r\n\tconst props = defineProps({\r\n\t\tcomments: Array,\r\n\t\tactiveSentence: Number,\r\n\t\tmaxLines: {\r\n\t\t\t// 新增：控制最大行数\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 3\r\n\t\t},\r\n\t\tmaxDanmus: {\r\n\t\t\t// 新增：控制最大弹幕数量\r\n\t\t\ttype: Number,\r\n\t\t\tdefault: 5\r\n\t\t}\r\n\t});\r\n\r\n\tconst colorPool = [\r\n\t\t\"#FF6B6B\",\r\n\t\t\"#4ECDC4\",\r\n\t\t\"#45B7D1\",\r\n\t\t\"#FFA07A\",\r\n\t\t\"#98D8C8\",\r\n\t\t\"#F06292\",\r\n\t\t\"#7986CB\",\r\n\t\t\"#9575CD\",\r\n\t\t\"#64B5F6\",\r\n\t\t\"#4DB6AC\",\r\n\t\t\"#81C784\",\r\n\t\t\"#FFD54F\"\r\n\t];\r\n\r\n\tconst danmuContainer = ref(null);\r\n\tconst danmuLines = ref([]); // 记录每行弹幕的结束时间\r\n\tconst allDanmus = ref([]);\r\n\r\n\t// 获取随机颜色\r\n\tconst getRandomColor = () => {\r\n\t\treturn colorPool[Math.floor(Math.random() * colorPool.length)];\r\n\t};\r\n\r\n\t// 获取某句子的相关评论\r\n\tconst getCommentsForSentence = sentenceIndex => {\r\n\t\treturn props.comments.filter(comment => comment.link === sentenceIndex);\r\n\t};\r\n\r\n\t// 计算弹幕速度（根据长度）\r\n\tconst calculateSpeed = text => {\r\n\t\tconst baseSpeed = 10;\r\n\t\tconst lengthFactor = Math.min(text.length / 50, 2); // 长度影响系数\r\n\t\treturn baseSpeed + Math.random() * 5 * lengthFactor;\r\n\t};\r\n\r\n\t// 分配弹幕行（防止重叠）\r\n\tconst assignDanmuLine = () => {\r\n\t\tconst now = Date.now();\r\n\t\tconst availableLines = [];\r\n\r\n\t\t// 找出可用的行\r\n\t\tfor (let i = 0; i < props.maxLines; i++) {\r\n\t\t\tif (!danmuLines.value[i] || danmuLines.value[i] < now) {\r\n\t\t\t\tavailableLines.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn availableLines.length > 0\r\n\t\t\t? availableLines[Math.floor(Math.random() * availableLines.length)]\r\n\t\t\t: Math.floor(Math.random() * props.maxLines); // 如果都占用则随机选一行\r\n\t};\r\n\r\n\t// 生成弹幕数据\r\n\tconst generateDanmus = () => {\r\n\t\tif (props.activeSentence === null) return;\r\n\r\n\t\tconst relatedComments = getCommentsForSentence(props.activeSentence);\r\n\t\tif (relatedComments.length === 0) return;\r\n\r\n\t\t// 限制弹幕数量\r\n\t\tconst commentsToShow = relatedComments.slice(0, props.maxDanmus);\r\n\r\n\t\tcommentsToShow.forEach(comment => {\r\n\t\t\tconst lineIndex = assignDanmuLine();\r\n\t\t\tconst speed = calculateSpeed(comment.content);\r\n\r\n\t\t\t// 记录此行将被占用（预计3秒后释放）\r\n\t\t\tdanmuLines.value[lineIndex] = Date.now() + speed * 1000;\r\n\r\n\t\t\tallDanmus.value.push({\r\n\t\t\t\tid: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\r\n\t\t\t\tcontent: comment.content,\r\n\t\t\t\tuser: comment.user_nickname,\r\n\t\t\t\tcolor: getRandomColor(),\r\n\t\t\t\ttop: lineIndex * 30 + 10, // 每行间隔30px\r\n\t\t\t\tspeed: speed,\r\n\t\t\t\tcreateTime: Date.now()\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t// 清理过期弹幕\r\n\tconst cleanExpiredDanmus = () => {\r\n\t\tconst now = Date.now();\r\n\t\tallDanmus.value = allDanmus.value.filter(danmu => {\r\n\t\t\treturn now - danmu.createTime < danmu.speed * 1000 * 1.5; // 保留时间比动画时间长50%\r\n\t\t});\r\n\t};\r\n\r\n\t// 可见的弹幕（限制数量）\r\n\tconst visibleDanmus = computed(() => {\r\n\t\tcleanExpiredDanmus();\r\n\t\treturn allDanmus.value.slice(-props.maxDanmus * 2); // 保留最近N条\r\n\t});\r\n\r\n\t// 监听激活的句子变化\r\n\twatch(\r\n\t\t() => props.activeSentence,\r\n\t\tnewVal => {\r\n\t\t\tif (newVal !== null) {\r\n\t\t\t\tgenerateDanmus();\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\r\n\t// 初始化行记录\r\n\tonMounted(() => {\r\n\t\tdanmuLines.value = Array(props.maxLines).fill(0);\r\n\t});\r\n</script>\r\n\r\n<style scoped>\r\n\t.danmu-container {\r\n\t\tposition: fixed;\r\n\t\ttop: 20px;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: calc(v-bind(\"props.maxLines\") * 30px + 20px);\r\n\t\toverflow: hidden;\r\n\t\tz-index: 100;\r\n\t\tpointer-events: none;\r\n\t}\r\n\r\n\t.danmu-item {\r\n\t\tposition: absolute;\r\n\t\twhite-space: nowrap;\r\n\t\tfont-size: 16px;\r\n\t\ttext-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);\r\n\t\tpadding: 4px 12px;\r\n\t\tborder-radius: 15px;\r\n\t\tbackground-color: rgba(255, 255, 255, 0.8);\r\n\t\tbox-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n\t\tanimation: danmu-move linear;\r\n\t\tleft: 100%;\r\n\t\ttransform: translateX(0);\r\n\t\twill-change: transform;\r\n\t}\r\n\r\n\t@keyframes danmu-move {\r\n\t\tto {\r\n\t\t\ttransform: translateX(-100vw);\r\n\t\t}\r\n\t}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}